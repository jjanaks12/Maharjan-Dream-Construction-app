{"version":3,"sources":["webpack:///./src/pages/Login.tsx","webpack:///./src/core/FormComponent.tsx"],"names":["Login","isLoggingIn","formData","email","password","errors","this","$nextTick","$route","query","formSubmitted","length","name","event","preventDefault","resetErrorMessage","then","result","hasError","login","data","errorList","$router","push","computed","methods","FormComponent","Object","keys","reduce","acc","key","message","field","forEach"],"mappings":"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","file":"js/chunk-28adf1b0.98172d59.js","sourcesContent":["import { iErrorMessage, iLogin } from '@/interfaces/auth'\r\nimport FormComponent from '@/core/FormComponent'\r\n\r\nimport { validate } from 'vee-validate'\r\nimport { VNode } from 'vue'\r\nimport { Component } from 'vue-property-decorator'\r\nimport { mapActions, mapGetters } from 'vuex'\r\n\r\n@Component({\r\n  computed: {\r\n    ...mapGetters({\r\n      errorList: 'root/getErrorMessage',\r\n    })\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      login: 'root/login'\r\n    })\r\n  }\r\n})\r\nexport default class Login extends FormComponent {\r\n  private login!: (formData: iLogin) => Promise<boolean>\r\n  private isLoggingIn: boolean = false\r\n  private errorList?: iErrorMessage\r\n  private formData: iLogin = {\r\n    email: '',\r\n    password: ''\r\n  }\r\n\r\n  constructor() {\r\n    super()\r\n\r\n    this.errors = {\r\n      email: [],\r\n      password: []\r\n    }\r\n  }\r\n\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      if (this.$route.query.email)\r\n        this.formData.email = this.$route.query.email as string\r\n    })\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns VNode\r\n   */\r\n  render(): VNode {\r\n    return (<section class=\"account__section\">\r\n      <div class=\"account__section__body\">\r\n        <h1>Login</h1>\r\n        <form action=\"#\" class=\"account__section__form\" onSubmit={this.formSubmitted} novalidate>\r\n          <div class={{ 'form__group': true, 'input--invalid': this.errors.email.length > 0 }}>\r\n            <label class=\"sr-only\" for=\"asf-username\">Username</label>\r\n            <input type=\"email\" name=\"username\" id=\"asf-username\" placeholder=\"Username\" v-model={this.formData.email} />\r\n            {this.errors.email.length > 0 ? (<span class=\"input__text\">{this.errors.email[0]}</span>) : null}\r\n          </div>\r\n          <div class={{ 'form__group': true, 'input--invalid': this.errors.password.length > 0 }}>\r\n            <label class=\"sr-only\" for=\"asf-password\">Password</label>\r\n            <input type=\"password\" name=\"password\" id=\"asf-password\" placeholder=\"Password\" v-model={this.formData.password} />\r\n            {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\r\n          </div>\r\n          <div class=\"form__holder\">\r\n            <router-link to={{ name: \"forgot_password\" }} class=\"forgot__password\">Forgot password?</router-link>\r\n          </div>\r\n          <div class=\"btn__holder\">\r\n            <div class=\"btn__block\">\r\n              <button type=\"submit\" class=\"btn btn__primary\">\r\n                {this.isLoggingIn ? (<span class=\"icon-spinner loading\"></span>) : null}\r\n                login\r\n              </button>\r\n            </div>\r\n            <div class=\"btn__block\">\r\n              <span class=\"text\">or</span>\r\n            </div>\r\n            <div class=\"btn__block\">\r\n              <router-link to={{ name: 'register' }} class=\"btn btn__danger\">register</router-link>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param event \r\n   * HTML Form submit event\r\n   * \r\n   * @returns void\r\n   */\r\n  async formSubmitted(event: HTMLFormElement): Promise<void> {\r\n    event.preventDefault()\r\n    this.resetErrorMessage()\r\n\r\n    await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\r\n      .then(result => {\r\n        this.errors['email'] = result.errors\r\n      })\r\n\r\n    await validate(this.formData.password, 'required', { name: 'password' })\r\n      .then(result => {\r\n        this.errors['password'] = result.errors\r\n      })\r\n\r\n    this.$nextTick(async () => {\r\n      if (!this.hasError) {\r\n        this.isLoggingIn = true\r\n\r\n        try {\r\n          const data = await this.login(this.formData)\r\n\r\n          if (data) {\r\n            this.errors = { ...this.errors, ...this.errorList }\r\n            this.$router.push({ name: 'realstate' })\r\n          }\r\n\r\n        } finally {\r\n          this.isLoggingIn = false\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { iErrorMessage } from '@/interfaces/auth'\r\nimport { Component, Vue } from 'vue-property-decorator'\r\n\r\n// let timer: any\r\n@Component\r\nexport default class FormComponent extends Vue {\r\n    protected errors!: iErrorMessage\r\n\r\n    // @Watch('errors', { deep: true })\r\n    // errorWatcher() {\r\n    //     if (timer)\r\n    //         return\r\n\r\n    //     timer = setTimeout(() => {\r\n    //         this.resetErrorMessage()\r\n    //     }, 7000)\r\n    // }\r\n\r\n    /**\r\n    * Checks if there are any errors\r\n    * \r\n    * @returns boolean\r\n    */\r\n    get hasError(): boolean {\r\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\r\n            return acc || this.errors[key].length > 0\r\n        }, false)\r\n    }\r\n\r\n    get errorMessage(): string {\r\n        let message: string = ''\r\n\r\n        for (const field in this.errors) {\r\n            if (this.errors[field].length > 0) {\r\n                message = this.errors[field][0]\r\n                return message\r\n            }\r\n        }\r\n        return message\r\n    }\r\n\r\n    protected resetErrorMessage(): void {\r\n\r\n        Object.keys(this.errors).forEach((key: string) => {\r\n            this.errors[key] = []\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":""}