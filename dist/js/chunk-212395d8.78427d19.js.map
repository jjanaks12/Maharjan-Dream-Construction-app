{"version":3,"sources":["webpack:///./src/components/common/Modal.tsx","webpack:///./src/components/collection/Detail.tsx","webpack:///./src/pages/realState/Detail.tsx","webpack:///./src/core/FormComponent.tsx","webpack:///./src/components/realstate/Services.tsx","webpack:///./src/components/collection/Form.tsx","webpack:///./src/interfaces/appointment.ts","webpack:///./src/components/realstate/Appointment.tsx"],"names":["Modal","props","this","value","document","body","style","overflow","event","preventDefault","$emit","stopPropagation","$scopedSlots","header","title","$slots","default","Vue","__decorate","Prop","required","Watch","Component","CollectionDetail","showModal","list","length","fetch","realstate_id","$route","params","id","map","collection","realstate","includes","addToCollection","computed","mapGetters","methods","mapActions","slickOpt","rows","arrows","dots","RealstateDetail","isLoading","appointment","showCollection","showAvailabilityModal","property","location","rate","unit","excerpt","description","getProperty","checkAppointment","type","AppointmentType","REALSTATE","fetchCollection","setTimeout","$refs","propertyDetailSlick","reSlick","Object","keys","status","images","image","image_url","name","detail","FormComponent","errors","reduce","acc","key","message","field","forEach","RealestateService","item","bedroom","bathroom","parking","CollectionForm","isSaving","formData","formSubmitted","resetErrorMessage","validate","then","result","$nextTick","hasError","save","data","errorList","AppointmentStatus","Appointment","saving","user_id","date","updateUserID","RENT","rent_id","minDate","moment","add","format","maxDate","formSubmit","requestAppointment","user","deep"],"mappings":"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","file":"js/chunk-212395d8.78427d19.js","sourcesContent":["import { VNode } from \"vue\"\nimport { Component, Prop, Vue, Watch } from \"vue-property-decorator\"\n\n@Component\nexport default class Modal extends Vue {\n\n    constructor(props: any) {\n        super(props)\n    }\n\n    @Prop({ required: true }) value!: boolean\n    @Prop({ default: null }) title!: string | null\n\n    @Watch('value')\n    valueChanged() {\n        if (this.value)\n            document.body.style.overflow = 'hidden'\n        else\n            document.body.style.overflow = ''\n    }\n\n    render(): VNode {\n        return <div class={{ \"modal\": true, \"modal--active\": this.value }} onClick={(event: MouseEvent) => {\n            event.preventDefault()\n            this.$emit('input', false)\n        }}>\n            <div class=\"modal__holder\" onClick={(event: MouseEvent) => {\n                event.stopPropagation()\n            }}>\n                {this.$scopedSlots.header\n                    ? <header class=\"modal__header\">\n                        {this.$scopedSlots.header({})}\n                    </header>\n                    : this.title\n                        ? <header class=\"modal__header\">\n                            <h2>{this.title}</h2>\n                        </header>\n                        : null}\n                <div class=\"modal__body\">\n                    {this.$slots.default}\n                </div>\n                <footer class=\"modal__footer\">\n                    <button class=\"btn btn__default btn__xs\" onClick={(event: MouseEvent) => {\n                        event.preventDefault()\n                        this.$emit('input', false)\n                    }}>close</button>\n                </footer>\n            </div>\n        </div>\n    }\n}","import { VNode } from 'vue'\nimport { Component, Vue } from 'vue-property-decorator'\nimport { mapActions, mapGetters } from 'vuex'\n\nimport { iCollection } from '@/interfaces/collection'\nimport { iRealState } from '@/interfaces/app'\nimport Modal from '../common/Modal'\nimport CollectionForm from './Form'\n\n@Component({\n    computed: {\n        ...mapGetters({\n            list: 'collection/list'\n        })\n    },\n    methods: {\n        ...mapActions({\n            fetch: 'collection/fetch',\n            addToCollection: 'collection/addToCollection'\n        })\n    }\n})\nexport default class CollectionDetail extends Vue {\n    private showModal: boolean = false\n    private list!: Array<iCollection>\n    private fetch!: () => Promise<boolean>\n    private addToCollection!: (payload: { id: string, realstate_id: string }) => Promise<boolean>\n\n    constructor(props: any) {\n        super(props)\n    }\n\n    async mounted() {\n        if (this.list && this.list.length === 0) {\n            await this.fetch()\n        }\n    }\n\n    render(): VNode {\n        const realstate_id: string = this.$route.params.id\n\n        return <div class=\"collection__list\">\n            <h2>Available collections</h2>\n            {this.list.map((collection: iCollection) => (\n                collection.realstate\n                    ? !collection.realstate.map((realstate: iRealState) => realstate.id).includes(realstate_id)\n                    : true\n            ) ? <a class=\"collection__list__item\" href=\"#\" onClick={async (event: MouseEvent) => {\n                event.preventDefault()\n\n                await this.addToCollection({\n                    id: collection.id || '',\n                    realstate_id: this.$route.params.id\n                })\n                this.$emit('close')\n            }}>\n                {collection.title}\n            </a>\n                : null)\n            }\n            <a class=\"collection__list__item\" href=\"#\" onClick={(event: MouseEvent) => {\n                event.preventDefault()\n                this.showModal = true\n            }}>Add New Collection</a>\n            <Modal v-model={this.showModal}>\n                <CollectionForm onClose={() => { this.showModal = false }} />\n            </Modal>\n        </div>\n    }\n}","import { VNode } from 'vue'\nimport { Component, Vue } from 'vue-property-decorator'\nimport { mapActions } from 'vuex'\nimport Slick from 'vue-slick'\n\nimport { iImage, iRealState } from '@/interfaces/app'\nimport { appointment, AppointmentType } from '@/interfaces/appointment'\n\nimport RealestateService from '@/components/realstate/Services'\nimport Modal from '@/components/common/Modal'\nimport Appointment from '@/components/realstate/Appointment'\nimport CollectionDetail from '@/components/collection/Detail'\n\nconst slickOpt = {\n    rows: 0,\n    arrows: false,\n    dots: true\n}\n\n@Component({\n    methods: {\n        ...mapActions({\n            getProperty: 'realstate/getProperty',\n            checkAppointment: 'appointment/checkAppointment',\n            fetchCollection: 'collection/fetch',\n        })\n    }\n})\nexport default class RealstateDetail extends Vue {\n    private isLoading: boolean = false\n    private appointment: appointment | null = null\n    private showCollection: boolean = false\n\n    private getProperty!: (id: string) => iRealState\n    private checkAppointment!: (payload: { type: string, id: string }) => any\n    private fetchCollection!: () => any\n    private showAvailabilityModal: boolean = false\n    private property: iRealState = {\n        location: '',\n        rate: '',\n        unit: '',\n        excerpt: '',\n        description: '',\n    }\n\n    async mounted() {\n        this.isLoading = true\n        const id = this.$route?.params?.id\n        this.property = await this.getProperty(id)\n        this.appointment = await this.checkAppointment({ type: AppointmentType.REALSTATE, id })\n        this.fetchCollection()\n\n        this.isLoading = false\n\n        setTimeout(() => {\n            (this.$refs?.propertyDetailSlick as any)?.reSlick()\n        }, 500)\n    }\n\n    render(): VNode {\n        return (<main id=\"main\">\n            <section class=\"item__section\">\n                <div class=\"item__detail\">\n                    {!this.isLoading\n                        ? [\n                            this.appointment && Object.keys(this.appointment).length > 0\n                                ? <div class=\"meta__info\">\n                                    <p>Your appointment for this propperty has <span class=\"text--primary\">{this.appointment.status}</span> status. You will soon get updates</p>\n                                </div>\n                                : null,\n                            <div class=\"item__detail__header\">\n                                <a href=\"#\" class=\"btn btn__xs btn__success\" onClick={(event: MouseEvent) => {\n                                    event.preventDefault()\n                                    this.showCollection = true\n                                }}>add to collection</a>\n                                {!(this.appointment && Object.keys(this.appointment).length > 0)\n                                    ? <a href=\"#\" class=\"btn btn__xs btn__primary\" onClick={(event: MouseEvent) => {\n                                        event.preventDefault()\n                                        this.showAvailabilityModal = true\n                                    }}>Request Appointment</a>\n                                    : null}\n                            </div>,\n                            this.property.images\n                                ? <Slick class=\"item__detail__image\" options={slickOpt} ref=\"propertyDetailSlick\">\n                                    {this.property.images?.map((image: iImage) => (<img src={image.image_url} alt={this.property.name} />))}\n                                </Slick>\n                                : null,\n                            <div class=\"item__detail__description\">\n                                <h2>{this.property.location}</h2>\n                                <div class=\"text__holder\" domPropsInnerHTML={this.property.description} />\n                                {this.property.detail ? (<RealestateService item={this.property.detail} />) : null}\n                            </div>\n                        ]\n                        : null}\n                </div>\n            </section>\n            <Modal v-model={this.showAvailabilityModal}>\n                <Appointment onClose={() => { this.showAvailabilityModal = false }} />\n            </Modal>\n            <Modal v-model={this.showCollection}>\n                <CollectionDetail onClose={() => { this.showCollection = false }} />\n            </Modal>\n        </main>)\n    }\n}\n","import { iErrorMessage } from '@/interfaces/auth'\nimport { Component, Vue } from 'vue-property-decorator'\n\n// let timer: any\n@Component\nexport default class FormComponent extends Vue {\n    protected errors!: iErrorMessage\n\n    // @Watch('errors', { deep: true })\n    // errorWatcher() {\n    //     if (timer)\n    //         return\n\n    //     timer = setTimeout(() => {\n    //         this.resetErrorMessage()\n    //     }, 7000)\n    // }\n\n    /**\n    * Checks if there are any errors\n    * \n    * @returns boolean\n    */\n    get hasError(): boolean {\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\n            return acc || this.errors[key].length > 0\n        }, false)\n    }\n\n    get errorMessage(): string {\n        let message: string = ''\n\n        for (const field in this.errors) {\n            if (this.errors[field].length > 0) {\n                message = this.errors[field][0]\n                return message\n            }\n        }\n        return message\n    }\n\n    protected resetErrorMessage(): void {\n\n        Object.keys(this.errors).forEach((key: string) => {\n            this.errors[key] = []\n        })\n    }\n}\n","import { VNode } from 'vue'\nimport { Component, Prop, Vue } from 'vue-property-decorator'\n\nimport { iService } from '@/interfaces/app'\n\n@Component\nexport default class RealestateService extends Vue {\n\n    constructor(props: any) {\n        super(props)\n    }\n\n    @Prop({ required: true }) item!: iService\n\n    /**\n     * @returns VNode\n     */\n    render(): VNode {\n        return (<div class=\"service__list\">\n            {this.item?.bedroom ? (<div class=\"service__item\">\n                <span class=\"icon-bed\"></span>\n                <span class=\"text\">+{this.item?.bedroom}</span>\n            </div>) : null}\n            {this.item?.bathroom ? (<div class=\"service__item\">\n                <span class=\"icon-shower\"></span>\n                <span class=\"text\">+{this.item?.bathroom}</span>\n            </div>) : null}\n            {this.item?.parking ? (<div class=\"service__item\">\n                <span class=\"icon-car\"></span>\n                <span class=\"text\">+{this.item?.parking}</span>\n            </div>) : null}\n        </div>)\n    }\n}\n","import { VNode } from 'vue'\nimport { Component, Prop } from 'vue-property-decorator'\nimport { validate } from 'vee-validate'\nimport { mapActions } from 'vuex'\n\nimport FormComponent from '@/core/FormComponent'\nimport { iCollection } from '@/interfaces/collection'\nimport { iErrorMessage } from '@/interfaces/auth'\n\n@Component({\n    methods: {\n        ...mapActions({\n            save: 'collection/save'\n        })\n    }\n})\nexport default class CollectionForm extends FormComponent {\n    private isSaving: boolean = false\n    private errorList?: iErrorMessage\n    private save!: (formData: iCollection) => Promise<boolean>\n    private formData: iCollection = {\n        title: ''\n    }\n\n    constructor(props: any) {\n        super(props)\n\n        this.errors = {\n            title: []\n        }\n    }\n\n    @Prop({ default: null }) detail!: iCollection | null\n\n    mounted() {\n        if (this.detail && Object.keys(this.detail).length > 0) {\n            this.formData.id = this.detail.id\n            this.formData.title = this.detail.title\n        }\n    }\n\n    render(): VNode {\n        return <div class=\"collection__form\">\n            <h2>Add new Collection</h2>\n            <form action=\"#\" onSubmit={this.formSubmitted} novalidate>\n                <div class={{ 'form__group': true, 'input--invalid': this.errors.title.length > 0 }}>\n                    <label class=\"sr-only\" for=\"title\">Title</label>\n                    <input type=\"text\" name=\"title\" id=\"title\" placeholder=\"Title of the collection\" v-model={this.formData.title} />\n                    {this.errors.title.length > 0 ? (<span class=\"input__text\">{this.errors.title[0]}</span>) : null}\n                </div>\n                <div class=\"btn__holder\">\n                    <div class=\"btn__block\">\n                        <button type=\"submit\" class=\"btn btn__primary\">\n                            {this.isSaving ? (<span class=\"icon-spinner loading\"></span>) : null}\n                            save\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    }\n\n    /**\n     * \n     * @param event \n     * HTML Form submit event\n     * \n     * @returns void\n     */\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\n        event.preventDefault()\n        this.resetErrorMessage()\n\n        await validate(this.formData.title, 'required', { name: 'title' })\n            .then(result => {\n                this.errors['title'] = result.errors\n            })\n\n        this.$nextTick(async () => {\n            if (!this.hasError) {\n                this.isSaving = true\n\n                try {\n                    const data = await this.save(this.formData)\n\n                    if (data) {\n                        this.errors = { ...this.errors, ...this.errorList }\n                        this.$emit('close')\n                    }\n\n                } finally {\n                    this.isSaving = false\n                }\n            }\n        })\n    }\n}","import { iUserDetail } from './auth'\n\nexport enum AppointmentStatus {\n    REQUESTED = 'requested',\n    ACCEPTED = 'accepted',\n    REJECTED = 'rejected',\n    // DELAYED = 'delayed',\n}\n\nexport interface appointment {\n    id?: string\n    user_id: string\n    realstate_id?: string\n    rent_id?: string\n    status?: AppointmentStatus\n    user?: iUserDetail\n    type: AppointmentType\n    date: string\n}\n\nexport enum AppointmentType {\n    REALSTATE = 'realstate',\n    RENT = 'rent'\n}","import { VNode } from 'vue'\nimport { Component, Prop, Watch } from \"vue-property-decorator\"\nimport { mapActions, mapGetters } from 'vuex'\n\nimport FormComponent from '@/core/FormComponent'\nimport { iErrorMessage, iUserDetail } from '@/interfaces/auth'\nimport { validate } from 'vee-validate'\nimport { appointment, AppointmentType } from '@/interfaces/appointment'\nimport moment from 'moment'\n\n@Component({\n    computed: {\n        ...mapGetters({\n            errorList: 'root/getErrorMessage',\n            user: 'root/getLoggedinUser'\n        })\n    },\n    methods: {\n        ...mapActions({\n            requestAppointment: 'appointment/requestAppointment'\n        })\n    }\n})\nexport default class Appointment extends FormComponent {\n    private user!: iUserDetail\n    private saving: boolean = false\n    private errorList?: iErrorMessage\n    private requestAppointment!: (formData: appointment) => Promise<boolean>\n    private formData: appointment = {\n        type: AppointmentType.REALSTATE,\n        user_id: '',\n        date: ''\n    }\n\n    constructor(props: any) {\n        super(props)\n\n        this.errors = {\n            date: []\n        }\n    }\n\n    @Prop({ default: AppointmentType.REALSTATE }) type!: AppointmentType\n\n    @Watch('user', { deep: true })\n    userChanged() {\n        this.updateUserID()\n    }\n\n    mounted() {\n        this.updateUserID()\n\n        this.formData.type = this.type\n\n        if (this.type == AppointmentType.RENT)\n            this.formData.rent_id = this.$route.params.id\n        else\n            this.formData.realstate_id = this.$route.params.id\n    }\n\n    render(): VNode {\n        const minDate: string = moment().add(1, 'day').format('YYYY-MM-DD') + 'T00:00'\n        const maxDate: string = moment().add(1, 'month').format('YYYY-MM-DD') + 'T00:00'\n\n        return <div class=\"appointment\">\n            <h2>Get an appointment</h2>\n            <p>You can choose a date to vist for Property</p>\n            <form action=\"#\" novalidate onSubmit={this.formSubmit}>\n                <div class={{ 'form__group': true, 'input--invalid': this.errors.date.length > 0 }}>\n                    <label for=\"date\">Choose a date</label>\n                    <input type=\"datetime-local\" name=\"date\" id=\"date\" placeholder=\"Choose a date\" max={maxDate} min={minDate} v-model={this.formData.date} />\n                    {this.errors.date.length > 0 ? (<span class=\"input__text\">{this.errors.date[0]}</span>) : null}\n                </div>\n                <div className=\"btn__holder text--right\">\n                    <button class=\"btn btn__primary\">Request</button>\n                </div>\n            </form>\n        </div>\n    }\n\n    async formSubmit(event: HTMLFormElement) {\n        event.preventDefault()\n\n        await validate(this.formData.date, 'required', { name: 'date' })\n            .then(result => {\n                this.errors['date'] = result.errors\n            })\n\n        this.$nextTick(async () => {\n            if (!this.hasError) {\n                this.saving = true\n\n                try {\n                    const data = await this.requestAppointment(this.formData)\n\n                    if (data) {\n                        this.$emit('close')\n                    } else {\n                        this.errors = { ...this.errors, ...this.errorList }\n                    }\n\n                } finally {\n                    this.saving = false\n                }\n            }\n        })\n    }\n\n    updateUserID() {\n        if (this.user.id)\n            this.formData.user_id = this.user.id\n    }\n}"],"sourceRoot":""}