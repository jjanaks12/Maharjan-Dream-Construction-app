{"version":3,"sources":["webpack:///./src/pages/Register.tsx","webpack:///./src/core/FormComponent.tsx"],"names":["Register","isLoggingIn","isSuccess","formData","name","address","password","confirm_password","phone","email","errors","this","event","preventDefault","$router","push","query","formSubmitted","length","resetErrorMessage","then","result","values","confirmation","$nextTick","hasError","register","errorList","finally","computed","methods","FormComponent","Object","keys","reduce","acc","key","message","field","forEach"],"mappings":"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","file":"js/chunk-28b26c2a.3d5e80af.js","sourcesContent":["import { iErrorMessage, iUserDetail } from '@/interfaces/auth'\r\nimport FormComponent from '@/core/FormComponent'\r\n\r\nimport { validate } from 'vee-validate'\r\nimport { VNode } from 'vue'\r\nimport { Component } from 'vue-property-decorator'\r\nimport { mapActions, mapGetters } from 'vuex'\r\n\r\n@Component({\r\n    computed: {\r\n        ...mapGetters({\r\n            errorList: 'root/getErrorMessage'\r\n        })\r\n    },\r\n    methods: {\r\n        ...mapActions({\r\n            register: 'root/register'\r\n        })\r\n    }\r\n})\r\nexport default class Register extends FormComponent {\r\n    private register!: (formData: iUserDetail) => Promise<boolean>\r\n    private isLoggingIn: boolean = false\r\n    private errorList?: iErrorMessage\r\n    private isSuccess: boolean = false\r\n    private formData: iUserDetail = {\r\n        name: '',\r\n        address: '',\r\n        password: '',\r\n        confirm_password: '',\r\n        phone: '',\r\n        email: '',\r\n    }\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        this.errors = {\r\n            name: [],\r\n            address: [],\r\n            password: [],\r\n            confirm_password: [],\r\n            phone: [],\r\n            email: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns VNode\r\n     */\r\n    render(): VNode {\r\n        return (<section class=\"account__section\">\r\n            <div class=\"account__section__body\">\r\n                {!this.isSuccess ? [<h1>Register</h1>,\r\n                <form action=\"#\" class=\"account__section__form\" onSubmit={this.formSubmitted} novalidate>\r\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.name.length > 0 }}>\r\n                        <label class=\"sr-only\" for=\"asf-name\">Full Name</label>\r\n                        <input type=\"text\" name=\"name\" id=\"asf-name\" placeholder=\"Name\" v-model={this.formData.name} />\r\n                        {this.errors.name.length > 0 ? (<span class=\"input__text\">{this.errors.name[0]}</span>) : null}\r\n                    </div>\r\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.email.length > 0 }}>\r\n                        <label class=\"sr-only\" for=\"asf-username\">Username</label>\r\n                        <input type=\"email\" name=\"username\" id=\"asf-username\" placeholder=\"Email\" v-model={this.formData.email} />\r\n                        {this.errors.email.length > 0 ? (<span class=\"input__text\">{this.errors.email[0]}</span>) : null}\r\n                    </div>\r\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.password.length > 0 }}>\r\n                        <label class=\"sr-only\" for=\"asf-password\">Password</label>\r\n                        <input type=\"password\" name=\"password\" id=\"asf-password\" placeholder=\"Password\" v-model={this.formData.password} />\r\n                        {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\r\n                    </div>\r\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.confirm_password.length > 0 }}>\r\n                        <label class=\"sr-only\" for=\"asf-confirm_password\">Confirm Password</label>\r\n                        <input type=\"password\" name=\"password\" id=\"asf-confirm_password\" placeholder=\"Confirm Password\" v-model={this.formData.confirm_password} />\r\n                        {this.errors.confirm_password.length > 0 ? (<span class=\"input__text\">{this.errors.confirm_password[0]}</span>) : null}\r\n                    </div>\r\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.address.length > 0 }}>\r\n                        <label class=\"sr-only\" for=\"asf-address\">Address</label>\r\n                        <input type=\"text\" name=\"name\" id=\"asf-address\" placeholder=\"Address\" v-model={this.formData.address} />\r\n                        {this.errors.address.length > 0 ? (<span class=\"input__text\">{this.errors.address[0]}</span>) : null}\r\n                    </div>\r\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.phone.length > 0 }}>\r\n                        <label class=\"sr-only\" for=\"asf-phone\">Phone</label>\r\n                        <input type=\"text\" name=\"name\" id=\"asf-phone\" placeholder=\"Phone\" v-model={this.formData.phone} />\r\n                        {this.errors.phone.length > 0 ? (<span class=\"input__text\">{this.errors.phone[0]}</span>) : null}\r\n                    </div>\r\n                    <div class=\"btn__holder\">\r\n                        <div class=\"btn__block\">\r\n                            <button type=\"submit\" class=\"btn btn__danger\">\r\n                                {this.isLoggingIn ? (<span class=\"icon-spinner loading\"></span>) : null}\r\n                                Register\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"btn__block\">\r\n                            <span class=\"text\">or</span>\r\n                        </div>\r\n                        <div class=\"btn__block\">\r\n                            <router-link to={{ name: \"login\" }} class=\"btn btn__primary\">login</router-link>\r\n                        </div>\r\n                    </div>\r\n                </form>] : <div class=\"account__message\">\r\n                    <h2 class=\"h3\">Your account has been created successfully</h2>\r\n                    <p>Please check you registered email <strong>{this.formData.email}</strong> for verification link.</p>\r\n                    <a href=\"#\" class=\"btn btn__primary\" onClick={(event: MouseEvent) => {\r\n                        event.preventDefault();\r\n                        this.$router.push({\r\n                            name: 'login', query: {\r\n                                email: this.formData.email\r\n                            }\r\n                        })\r\n                    }}>Continue</a>\r\n                </div>}\r\n            </div>\r\n        </section >)\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param event \r\n     * HTML Form submit event\r\n     * \r\n     * @returns void\r\n     */\r\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\r\n        event.preventDefault()\r\n        this.resetErrorMessage()\r\n\r\n        await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\r\n            .then(result => {\r\n                this.errors['email'] = result.errors\r\n            })\r\n\r\n        await validate(this.formData.name, 'required', { name: 'name' })\r\n            .then(result => {\r\n                this.errors['name'] = result.errors\r\n            })\r\n\r\n        await validate(this.formData.address, 'required', { name: 'address' })\r\n            .then(result => {\r\n                this.errors['address'] = result.errors\r\n            })\r\n\r\n        await validate(this.formData.password, 'required|min:6|confirmed:confirmation', { name: 'password', values: { confirmation: this.formData.confirm_password } })\r\n            .then(result => {\r\n                this.errors['password'] = result.errors\r\n            })\r\n\r\n        await validate(this.formData.confirm_password, 'required', { name: 'confirm_password' })\r\n            .then(result => {\r\n                this.errors['confirm_password'] = result.errors\r\n            })\r\n\r\n        this.$nextTick(() => {\r\n            if (!this.hasError) {\r\n                this.isLoggingIn = true\r\n                const formData = { ...this.formData }\r\n                delete formData.confirm_password\r\n\r\n                this.register(formData)\r\n                    .then(() => {\r\n                        this.errors = { ...this.errors, ...this.errorList }\r\n\r\n                        if (!this.hasError)\r\n                            this.isSuccess = true\r\n                    })\r\n                    .finally(() => {\r\n                        this.isLoggingIn = false\r\n                    })\r\n            }\r\n        })\r\n    }\r\n}\r\n","import { iErrorMessage } from '@/interfaces/auth'\r\nimport { Component, Vue } from 'vue-property-decorator'\r\n\r\n// let timer: any\r\n@Component\r\nexport default class FormComponent extends Vue {\r\n    protected errors!: iErrorMessage\r\n\r\n    // @Watch('errors', { deep: true })\r\n    // errorWatcher() {\r\n    //     if (timer)\r\n    //         return\r\n\r\n    //     timer = setTimeout(() => {\r\n    //         this.resetErrorMessage()\r\n    //     }, 7000)\r\n    // }\r\n\r\n    /**\r\n    * Checks if there are any errors\r\n    * \r\n    * @returns boolean\r\n    */\r\n    get hasError(): boolean {\r\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\r\n            return acc || this.errors[key].length > 0\r\n        }, false)\r\n    }\r\n\r\n    get errorMessage(): string {\r\n        let message: string = ''\r\n\r\n        for (const field in this.errors) {\r\n            if (this.errors[field].length > 0) {\r\n                message = this.errors[field][0]\r\n                return message\r\n            }\r\n        }\r\n        return message\r\n    }\r\n\r\n    protected resetErrorMessage(): void {\r\n\r\n        Object.keys(this.errors).forEach((key: string) => {\r\n            this.errors[key] = []\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":""}