{"version":3,"sources":["webpack:///./src/core/FormComponent.tsx","webpack:///./src/pages/account/ResetPassword.tsx"],"names":["FormComponent","Object","keys","this","errors","reduce","acc","key","length","message","field","forEach","ResetPassword","props","isSaving","formData","password","password_confirmation","email","code","$route","query","formSubmitted","event","preventDefault","resetErrorMessage","name","values","confirmation","then","result","$nextTick","hasError","resetPassword","$router","push","finally","methods"],"mappings":"oNAKqBA,EAArB,wKAkBI,WAAY,WACR,OAAOC,OAAOC,KAAKC,KAAKC,QAAQC,QAAO,SAACC,EAAcC,GAClD,OAAOD,GAAO,EAAKF,OAAOG,GAAKC,OAAS,KACzC,KArBX,wBAwBI,WACI,IAAIC,EAAkB,GAEtB,IAAK,IAAMC,KAASP,KAAKC,OACrB,GAAID,KAAKC,OAAOM,GAAOF,OAAS,EAE5B,OADAC,EAAUN,KAAKC,OAAOM,GAAO,GACtBD,EAGf,OAAOA,IAjCf,+BAoCc,WAAiB,WAEvBR,OAAOC,KAAKC,KAAKC,QAAQO,SAAQ,SAACJ,GAC9B,EAAKH,OAAOG,GAAO,UAvC/B,GAA2C,QAAtBP,EAAa,gBADjC,QACoBA,GAAA,U,4NCUAY,EAArB,wDAUI,WAAYC,GAAU,oCAClB,cAAMA,GAVF,EAAAC,UAAoB,EAEpB,EAAAC,SAA0B,CAC9BC,SAAU,GACVC,sBAAuB,GACvBC,MAAO,GACPC,KAAM,IAMN,EAAKf,OAAS,CACVY,SAAU,GACVC,sBAAuB,IALT,EAV1B,8CAmBI,WACId,KAAKY,SAASI,KAAOhB,KAAKiB,OAAOC,MAAMF,KACvChB,KAAKY,SAASG,MAAQf,KAAKiB,OAAOC,MAAMH,QArBhD,oBA2BI,WAAM,0BACF,2BAAiB,SAAjB,oBACmB,qBADnB,gBAEmB,6BAFnB,qDAIyB,IAJzB,qBAImC,yBAJnC,WAIsEf,KAAKmB,gBAJ3E,gBAK2B,eAL3B,kBAMiC,UANjC,WAM+C,iBAN/C,mFAOqH,EAAKP,SAP1H,yCAOgC,WAPhC,KAOgD,eAPhD,GAOkE,eAPlE,YAO6F,gBAP7F,gBAOqH,EAAKA,SAASC,WAPnI,iCAOqH,EAAKD,SAASC,SAPnI,mBAQqBb,KAAKC,OAAOY,SAASR,OAAS,EAA9B,gBAA+C,eAA/C,CAA8DL,KAAKC,OAAOY,SAAS,KAAc,OARtH,eAU2B,eAV3B,kBAWiC,UAXjC,WAW+C,qBAX/C,2FAYqI,EAAKD,SAZ1I,sDAYgC,WAZhC,KAYgD,mBAZhD,GAYsE,mBAZtE,YAYqG,wBAZrG,gBAYqI,EAAKA,SAASE,wBAZnJ,iCAYqI,EAAKF,SAASE,sBAZnJ,mBAaqBd,KAAKC,OAAOa,sBAAsBT,OAAS,EAA3C,gBAA4D,eAA5D,CAA2EL,KAAKC,OAAOa,sBAAsB,KAAc,OAbhJ,eAe2B,eAf3B,gBAgB+B,cAhB/B,yBAiBqC,UAjBrC,MAiBoD,oBAjBpD,CAkB6Bd,KAAKW,SAAL,gBAA6B,yBAAkC,KAlB5F,uBA5BR,oFAgEI,WAAoBS,GAApB,mGACIA,EAAMC,iBACNrB,KAAKsB,oBAFT,SAIU,eAAStB,KAAKY,SAASC,SAAU,wCAAyC,CAAEU,KAAM,WAAYC,OAAQ,CAAEC,aAAczB,KAAKY,SAASE,yBACrIY,MAAK,SAAAC,GACF,EAAK1B,OAAO,YAAc0B,EAAO1B,UAN7C,uBASU,eAASD,KAAKY,SAASE,sBAAuB,iBAAkB,CAAES,KAAM,aACzEG,MAAK,SAAAC,GACF,EAAK1B,OAAO,yBAA2B0B,EAAO1B,UAX1D,OAcID,KAAK4B,WAAU,WAEN,EAAKC,WACN,EAAKlB,UAAW,EAEhB,EAAKmB,cAAc,EAAKlB,UACnBc,MAAK,WACF,EAAKK,QAAQC,KAAK,CAAET,KAAM,eAE7BU,SAAQ,WACL,EAAKtB,UAAW,SAxBpC,gDAhEJ,+DAA2C,QAAtBF,EAAa,gBAPjC,eAAU,CACPyB,QAAS,kBACF,eAAW,CACVJ,cAAe,2BAINrB,GAAA","file":"js/chunk-2886e142.24c8ebda.js","sourcesContent":["import { iErrorMessage } from '@/interfaces/auth'\r\nimport { Component, Vue } from 'vue-property-decorator'\r\n\r\n// let timer: any\r\n@Component\r\nexport default class FormComponent extends Vue {\r\n    protected errors!: iErrorMessage\r\n\r\n    // @Watch('errors', { deep: true })\r\n    // errorWatcher() {\r\n    //     if (timer)\r\n    //         return\r\n\r\n    //     timer = setTimeout(() => {\r\n    //         this.resetErrorMessage()\r\n    //     }, 7000)\r\n    // }\r\n\r\n    /**\r\n    * Checks if there are any errors\r\n    * \r\n    * @returns boolean\r\n    */\r\n    get hasError(): boolean {\r\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\r\n            return acc || this.errors[key].length > 0\r\n        }, false)\r\n    }\r\n\r\n    get errorMessage(): string {\r\n        let message: string = ''\r\n\r\n        for (const field in this.errors) {\r\n            if (this.errors[field].length > 0) {\r\n                message = this.errors[field][0]\r\n                return message\r\n            }\r\n        }\r\n        return message\r\n    }\r\n\r\n    protected resetErrorMessage(): void {\r\n\r\n        Object.keys(this.errors).forEach((key: string) => {\r\n            this.errors[key] = []\r\n        })\r\n    }\r\n}\r\n","import { VNode } from 'vue'\r\nimport { Component } from 'vue-property-decorator'\r\nimport { validate } from 'vee-validate'\r\nimport { mapActions } from 'vuex'\r\n\r\nimport FormComponent from '@/core/FormComponent'\r\nimport { resetPassword } from '@/interfaces/auth'\r\n\r\n@Component({\r\n    methods: {\r\n        ...mapActions({\r\n            resetPassword: 'root/resetPassword'\r\n        })\r\n    }\r\n})\r\nexport default class ResetPassword extends FormComponent {\r\n    private isSaving: boolean = false\r\n    private resetPassword!: (formData: resetPassword) => Promise<boolean>\r\n    private formData: resetPassword = {\r\n        password: '',\r\n        password_confirmation: '',\r\n        email: '',\r\n        code: '',\r\n    }\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n\r\n        this.errors = {\r\n            password: [],\r\n            password_confirmation: [],\r\n        }\r\n    }\r\n\r\n    mounted() {\r\n        this.formData.code = this.$route.query.code as string\r\n        this.formData.email = this.$route.query.email as string\r\n    }\r\n\r\n    /**\r\n     * @returns VNode\r\n     */\r\n    render(): VNode {\r\n        return (<main id=\"main\">\r\n            <section class=\"password__section\">\r\n                <div class=\"password__section__holder\">\r\n                    <h2>Change Password</h2>\r\n                    <form action=\"#\" class=\"change__password__form\" onSubmit={this.formSubmitted} novalidate>\r\n                        <div class=\"form__group\">\r\n                            <label class=\"sr-only\" for=\"new_password\">New Password</label>\r\n                            <input type=\"password\" name=\"new_password\" id=\"new_password\" placeholder=\"New Password\" v-model={this.formData.password} />\r\n                            {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\r\n                        </div>\r\n                        <div class=\"form__group\">\r\n                            <label class=\"sr-only\" for=\"confirm_password\">Confirm New Password</label>\r\n                            <input type=\"password\" name=\"confirm_password\" id=\"confirm_password\" placeholder=\"Confirm New Password\" v-model={this.formData.password_confirmation} />\r\n                            {this.errors.password_confirmation.length > 0 ? (<span class=\"input__text\">{this.errors.password_confirmation[0]}</span>) : null}\r\n                        </div>\r\n                        <div class=\"btn__holder\">\r\n                            <div class=\"btn__block\">\r\n                                <button type=\"submit\" class=\"btn btn__primary\">\r\n                                    {this.isSaving ? (<span class=\"icon-spinner loading\"></span>) : null}\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </section>\r\n        </main>)\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param event \r\n     * HTML Form submit event\r\n     * \r\n     * @returns void\r\n     */\r\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\r\n        event.preventDefault()\r\n        this.resetErrorMessage()\r\n\r\n        await validate(this.formData.password, 'required|min:6|confirmed:confirmation', { name: 'password', values: { confirmation: this.formData.password_confirmation } })\r\n            .then(result => {\r\n                this.errors['password'] = result.errors\r\n            })\r\n\r\n        await validate(this.formData.password_confirmation, 'required|min:6', { name: 'password' })\r\n            .then(result => {\r\n                this.errors['password_confirmation'] = result.errors\r\n            })\r\n\r\n        this.$nextTick(() => {\r\n\r\n            if (!this.hasError) {\r\n                this.isSaving = true\r\n\r\n                this.resetPassword(this.formData)\r\n                    .then(() => {\r\n                        this.$router.push({ name: 'account' })\r\n                    })\r\n                    .finally(() => {\r\n                        this.isSaving = false\r\n                    })\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":""}