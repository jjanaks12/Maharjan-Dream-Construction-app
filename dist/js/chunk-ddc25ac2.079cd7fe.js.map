{"version":3,"sources":["webpack:///./src/pages/Register.tsx","webpack:///./src/components/common/Brand.tsx","webpack:///./src/core/FormComponent.tsx","webpack:///./src/assets/images/logo.svg"],"names":["Register","isLoggingIn","isSuccess","formData","name","address","password","confirm_password","phone","email","errors","this","event","preventDefault","$router","push","query","formSubmitted","length","resetErrorMessage","validate","then","result","values","confirmation","$nextTick","hasError","register","errorList","finally","FormComponent","Component","computed","mapGetters","methods","mapActions","Brand","logo","Vue","Object","keys","reduce","acc","key","message","field","forEach","module","exports"],"mappings":"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","file":"js/chunk-ddc25ac2.079cd7fe.js","sourcesContent":["import { iErrorMessage, iUserDetail } from '@/interfaces/auth'\nimport FormComponent from '@/core/FormComponent'\n\nimport { validate } from 'vee-validate'\nimport { VNode } from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { mapActions, mapGetters } from 'vuex'\nimport Brand from '@/components/common/Brand'\n\n@Component({\n    computed: {\n        ...mapGetters({\n            errorList: 'root/getErrorMessage'\n        })\n    },\n    methods: {\n        ...mapActions({\n            register: 'root/register'\n        })\n    }\n})\nexport default class Register extends FormComponent {\n    private register!: (formData: iUserDetail) => Promise<boolean>\n    private isLoggingIn: boolean = false\n    private errorList?: iErrorMessage\n    private isSuccess: boolean = false\n    private formData: iUserDetail = {\n        name: '',\n        address: '',\n        password: '',\n        confirm_password: '',\n        phone: '',\n        email: '',\n    }\n\n    constructor() {\n        super()\n\n        this.errors = {\n            name: [],\n            address: [],\n            password: [],\n            confirm_password: [],\n            phone: [],\n            email: []\n        }\n    }\n\n    /**\n     * \n     * @returns VNode\n     */\n    render(): VNode {\n        return (<section class=\"account__section\">\n            <div class=\"account__section__body\">\n                {!this.isSuccess ? [<Brand />,\n                <h1>Register</h1>,\n                <form action=\"#\" class=\"account__section__form\" onSubmit={this.formSubmitted} novalidate>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.name.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-name\">Full Name</label>\n                        <input type=\"text\" name=\"name\" id=\"asf-name\" placeholder=\"Name\" v-model={this.formData.name} />\n                        {this.errors.name.length > 0 ? (<span class=\"input__text\">{this.errors.name[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.email.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-username\">Username</label>\n                        <input type=\"email\" name=\"username\" id=\"asf-username\" placeholder=\"Email\" v-model={this.formData.email} />\n                        {this.errors.email.length > 0 ? (<span class=\"input__text\">{this.errors.email[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.password.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-password\">Password</label>\n                        <input type=\"password\" name=\"password\" id=\"asf-password\" placeholder=\"Password\" v-model={this.formData.password} />\n                        {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.confirm_password.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-confirm_password\">Confirm Password</label>\n                        <input type=\"password\" name=\"password\" id=\"asf-confirm_password\" placeholder=\"Confirm Password\" v-model={this.formData.confirm_password} />\n                        {this.errors.confirm_password.length > 0 ? (<span class=\"input__text\">{this.errors.confirm_password[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.address.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-address\">Address</label>\n                        <input type=\"text\" name=\"name\" id=\"asf-address\" placeholder=\"Address\" v-model={this.formData.address} />\n                        {this.errors.address.length > 0 ? (<span class=\"input__text\">{this.errors.address[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.phone.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-phone\">Phone</label>\n                        <input type=\"text\" name=\"name\" id=\"asf-phone\" placeholder=\"Phone\" v-model={this.formData.phone} />\n                        {this.errors.phone.length > 0 ? (<span class=\"input__text\">{this.errors.phone[0]}</span>) : null}\n                    </div>\n                    <div class=\"btn__holder\">\n                        <div class=\"btn__block\">\n                            <button type=\"submit\" class=\"btn btn__danger\">\n                                {this.isLoggingIn ? (<span class=\"icon-spinner loading\"></span>) : null}\n                                Register\n                            </button>\n                        </div>\n                        <div class=\"btn__block\">\n                            <span class=\"text\">or</span>\n                        </div>\n                        <div class=\"btn__block\">\n                            <router-link to={{ name: \"login\" }} class=\"btn btn__primary\">login</router-link>\n                        </div>\n                    </div>\n                </form>] : <div class=\"account__message\">\n                    <h2 class=\"h3\">Your account has been created successfully</h2>\n                    <p>Please check you registered email <strong>{this.formData.email}</strong> for verification link.</p>\n                    <a href=\"#\" class=\"btn btn__primary\" onClick={(event: MouseEvent) => {\n                        event.preventDefault();\n                        this.$router.push({\n                            name: 'login', query: {\n                                email: this.formData.email\n                            }\n                        })\n                    }}>Continue</a>\n                </div>}\n            </div>\n        </section >)\n    }\n\n    /**\n     * \n     * @param event \n     * HTML Form submit event\n     * \n     * @returns void\n     */\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\n        event.preventDefault()\n        this.resetErrorMessage()\n\n        await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\n            .then(result => {\n                this.errors['email'] = result.errors\n            })\n\n        await validate(this.formData.name, 'required', { name: 'name' })\n            .then(result => {\n                this.errors['name'] = result.errors\n            })\n\n        await validate(this.formData.address, 'required', { name: 'address' })\n            .then(result => {\n                this.errors['address'] = result.errors\n            })\n\n        await validate(this.formData.password, 'required|min:6|confirmed:confirmation', { name: 'password', values: { confirmation: this.formData.confirm_password } })\n            .then(result => {\n                this.errors['password'] = result.errors\n            })\n\n        await validate(this.formData.confirm_password, 'required', { name: 'confirm_password' })\n            .then(result => {\n                this.errors['confirm_password'] = result.errors\n            })\n\n        this.$nextTick(() => {\n            if (!this.hasError) {\n                this.isLoggingIn = true\n                const formData = { ...this.formData }\n                delete formData.confirm_password\n\n                this.register(formData)\n                    .then(() => {\n                        this.errors = { ...this.errors, ...this.errorList }\n\n                        if (!this.hasError)\n                            this.isSuccess = true\n                    })\n                    .finally(() => {\n                        this.isLoggingIn = false\n                    })\n            }\n        })\n    }\n}\n","import { Component, Vue } from 'vue-property-decorator'\nimport { VNode } from 'vue'\n\nimport logo from '@/assets/images/logo.svg'\n\n\n@Component\nexport default class Brand extends Vue {\n    render(): VNode {\n        return <div class=\"logo\">\n            <router-link to={{ name: 'home' }}>\n                <img src={logo} alt=\"Guthi\" />\n            </router-link>\n        </div>\n    }\n}","import { iErrorMessage } from '@/interfaces/auth'\nimport { Component, Vue } from 'vue-property-decorator'\n\n// let timer: any\n@Component\nexport default class FormComponent extends Vue {\n    protected errors!: iErrorMessage\n\n    // @Watch('errors', { deep: true })\n    // errorWatcher() {\n    //     if (timer)\n    //         return\n\n    //     timer = setTimeout(() => {\n    //         this.resetErrorMessage()\n    //     }, 7000)\n    // }\n\n    /**\n    * Checks if there are any errors\n    * \n    * @returns boolean\n    */\n    get hasError(): boolean {\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\n            return acc || this.errors[key].length > 0\n        }, false)\n    }\n\n    get errorMessage(): string {\n        let message: string = ''\n\n        for (const field in this.errors) {\n            if (this.errors[field].length > 0) {\n                message = this.errors[field][0]\n                return message\n            }\n        }\n        return message\n    }\n\n    protected resetErrorMessage(): void {\n\n        Object.keys(this.errors).forEach((key: string) => {\n            this.errors[key] = []\n        })\n    }\n}\n","module.exports = __webpack_public_path__ + \"img/logo.3bfb7f4b.svg\";"],"sourceRoot":""}