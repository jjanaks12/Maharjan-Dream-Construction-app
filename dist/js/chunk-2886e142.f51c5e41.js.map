{"version":3,"sources":["webpack:///./src/core/FormComponent.tsx","webpack:///./src/pages/account/ResetPassword.tsx"],"names":["FormComponent","Object","keys","this","errors","reduce","acc","key","length","message","field","forEach","Vue","Component","ResetPassword","props","isSaving","formData","password","password_confirmation","email","code","$route","query","formSubmitted","event","preventDefault","resetErrorMessage","validate","name","values","confirmation","then","result","$nextTick","hasError","resetPassword","$router","push","finally","methods","mapActions"],"mappings":"8NAKqBA,EAAa,wKAkB9B,WAAY,WACR,OAAOC,OAAOC,KAAKC,KAAKC,QAAQC,QAAO,SAACC,EAAcC,GAClD,OAAOD,GAAO,EAAKF,OAAOG,GAAKC,OAAS,KACzC,KArBuB,wBAwB9B,WACI,IAAIC,EAAkB,GAEtB,IAAK,IAAMC,KAASP,KAAKC,OACrB,GAAID,KAAKC,OAAOM,GAAOF,OAAS,EAE5B,OADAC,EAAUN,KAAKC,OAAOM,GAAO,GACtBD,EAGf,OAAOA,IAjCmB,+BAoCpB,WAAiB,WAEvBR,OAAOC,KAAKC,KAAKC,QAAQO,SAAQ,SAACJ,GAC9B,EAAKH,OAAOG,GAAO,UAvCG,GAASK,QAAtBZ,EAAa,gBADjCa,QACoBb,a,4NCUAc,EAAa,wDAU9B,WAAYC,GAAU,oCAClB,cAAMA,GAVF,EAAAC,UAAoB,EAEpB,EAAAC,SAA0B,CAC9BC,SAAU,GACVC,sBAAuB,GACvBC,MAAO,GACPC,KAAM,IAMN,EAAKjB,OAAS,CACVc,SAAU,GACVC,sBAAuB,IALT,EAVQ,8CAmB9B,WACIhB,KAAKc,SAASI,KAAOlB,KAAKmB,OAAOC,MAAMF,KACvClB,KAAKc,SAASG,MAAQjB,KAAKmB,OAAOC,MAAMH,QArBd,oBA2B9B,WAAM,0BACF,2BAAiB,SAAjB,oBACmB,qBADnB,gBAEmB,6BAFnB,qDAIyB,IAJzB,qBAImC,yBAJnC,WAIsEjB,KAAKqB,gBAJ3E,gBAK2B,eAL3B,kBAMiC,UANjC,WAM+C,iBAN/C,mFAOqH,EAAKP,SAP1H,yCAOgC,WAPhC,KAOgD,eAPhD,GAOkE,eAPlE,YAO6F,gBAP7F,gBAOqH,EAAKA,SAASC,WAPnI,iCAOqH,EAAKD,SAASC,SAPnI,mBAQqBf,KAAKC,OAAOc,SAASV,OAAS,EAA9B,gBAA+C,eAA/C,CAA8DL,KAAKC,OAAOc,SAAS,KAAc,OARtH,eAU2B,eAV3B,kBAWiC,UAXjC,WAW+C,qBAX/C,2FAYqI,EAAKD,SAZ1I,sDAYgC,WAZhC,KAYgD,mBAZhD,GAYsE,mBAZtE,YAYqG,wBAZrG,gBAYqI,EAAKA,SAASE,wBAZnJ,iCAYqI,EAAKF,SAASE,sBAZnJ,mBAaqBhB,KAAKC,OAAOe,sBAAsBX,OAAS,EAA3C,gBAA4D,eAA5D,CAA2EL,KAAKC,OAAOe,sBAAsB,KAAc,OAbhJ,eAe2B,eAf3B,gBAgB+B,cAhB/B,yBAiBqC,UAjBrC,MAiBoD,oBAjBpD,CAkB6BhB,KAAKa,SAAL,gBAA6B,yBAAkC,KAlB5F,uBA5B0B,oFAgE9B,WAAoBS,GAApB,mGACIA,EAAMC,iBACNvB,KAAKwB,oBAFT,SAIUC,eAASzB,KAAKc,SAASC,SAAU,wCAAyC,CAAEW,KAAM,WAAYC,OAAQ,CAAEC,aAAc5B,KAAKc,SAASE,yBACrIa,MAAK,SAAAC,GACF,EAAK7B,OAAO,YAAc6B,EAAO7B,UAN7C,uBASUwB,eAASzB,KAAKc,SAASE,sBAAuB,iBAAkB,CAAEU,KAAM,aACzEG,MAAK,SAAAC,GACF,EAAK7B,OAAO,yBAA2B6B,EAAO7B,UAX1D,OAcID,KAAK+B,WAAU,WAEN,EAAKC,WACN,EAAKnB,UAAW,EAEhB,EAAKoB,cAAc,EAAKnB,UACnBe,MAAK,WACF,EAAKK,QAAQC,KAAK,CAAET,KAAM,eAE7BU,SAAQ,WACL,EAAKvB,UAAW,SAxBpC,gDAhE8B,+DAAShB,QAAtBc,EAAa,gBAPjCD,eAAU,CACP2B,QAAS,kBACFC,eAAW,CACVL,cAAe,2BAINtB","file":"js/chunk-2886e142.f51c5e41.js","sourcesContent":["import { iErrorMessage } from '@/interfaces/auth'\nimport { Component, Vue } from 'vue-property-decorator'\n\n// let timer: any\n@Component\nexport default class FormComponent extends Vue {\n    protected errors!: iErrorMessage\n\n    // @Watch('errors', { deep: true })\n    // errorWatcher() {\n    //     if (timer)\n    //         return\n\n    //     timer = setTimeout(() => {\n    //         this.resetErrorMessage()\n    //     }, 7000)\n    // }\n\n    /**\n    * Checks if there are any errors\n    * \n    * @returns boolean\n    */\n    get hasError(): boolean {\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\n            return acc || this.errors[key].length > 0\n        }, false)\n    }\n\n    get errorMessage(): string {\n        let message: string = ''\n\n        for (const field in this.errors) {\n            if (this.errors[field].length > 0) {\n                message = this.errors[field][0]\n                return message\n            }\n        }\n        return message\n    }\n\n    protected resetErrorMessage(): void {\n\n        Object.keys(this.errors).forEach((key: string) => {\n            this.errors[key] = []\n        })\n    }\n}\n","import { VNode } from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { validate } from 'vee-validate'\nimport { mapActions } from 'vuex'\n\nimport FormComponent from '@/core/FormComponent'\nimport { resetPassword } from '@/interfaces/auth'\n\n@Component({\n    methods: {\n        ...mapActions({\n            resetPassword: 'root/resetPassword'\n        })\n    }\n})\nexport default class ResetPassword extends FormComponent {\n    private isSaving: boolean = false\n    private resetPassword!: (formData: resetPassword) => Promise<boolean>\n    private formData: resetPassword = {\n        password: '',\n        password_confirmation: '',\n        email: '',\n        code: '',\n    }\n\n    constructor(props: any) {\n        super(props)\n\n        this.errors = {\n            password: [],\n            password_confirmation: [],\n        }\n    }\n\n    mounted() {\n        this.formData.code = this.$route.query.code as string\n        this.formData.email = this.$route.query.email as string\n    }\n\n    /**\n     * @returns VNode\n     */\n    render(): VNode {\n        return (<main id=\"main\">\n            <section class=\"password__section\">\n                <div class=\"password__section__holder\">\n                    <h2>Change Password</h2>\n                    <form action=\"#\" class=\"change__password__form\" onSubmit={this.formSubmitted} novalidate>\n                        <div class=\"form__group\">\n                            <label class=\"sr-only\" for=\"new_password\">New Password</label>\n                            <input type=\"password\" name=\"new_password\" id=\"new_password\" placeholder=\"New Password\" v-model={this.formData.password} />\n                            {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\n                        </div>\n                        <div class=\"form__group\">\n                            <label class=\"sr-only\" for=\"confirm_password\">Confirm New Password</label>\n                            <input type=\"password\" name=\"confirm_password\" id=\"confirm_password\" placeholder=\"Confirm New Password\" v-model={this.formData.password_confirmation} />\n                            {this.errors.password_confirmation.length > 0 ? (<span class=\"input__text\">{this.errors.password_confirmation[0]}</span>) : null}\n                        </div>\n                        <div class=\"btn__holder\">\n                            <div class=\"btn__block\">\n                                <button type=\"submit\" class=\"btn btn__primary\">\n                                    {this.isSaving ? (<span class=\"icon-spinner loading\"></span>) : null}\n                                    Save\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </section>\n        </main>)\n    }\n\n    /**\n     * \n     * @param event \n     * HTML Form submit event\n     * \n     * @returns void\n     */\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\n        event.preventDefault()\n        this.resetErrorMessage()\n\n        await validate(this.formData.password, 'required|min:6|confirmed:confirmation', { name: 'password', values: { confirmation: this.formData.password_confirmation } })\n            .then(result => {\n                this.errors['password'] = result.errors\n            })\n\n        await validate(this.formData.password_confirmation, 'required|min:6', { name: 'password' })\n            .then(result => {\n                this.errors['password_confirmation'] = result.errors\n            })\n\n        this.$nextTick(() => {\n\n            if (!this.hasError) {\n                this.isSaving = true\n\n                this.resetPassword(this.formData)\n                    .then(() => {\n                        this.$router.push({ name: 'account' })\n                    })\n                    .finally(() => {\n                        this.isSaving = false\n                    })\n            }\n        })\n    }\n}\n"],"sourceRoot":""}