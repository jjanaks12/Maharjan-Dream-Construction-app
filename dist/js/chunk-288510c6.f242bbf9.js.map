{"version":3,"sources":["webpack:///./src/core/FormComponent.tsx","webpack:///./src/pages/account/ForgotPassword.tsx"],"names":["FormComponent","Object","keys","this","errors","reduce","acc","key","length","message","field","forEach","ForgotPassword","props","isLoading","isSuccess","formData","email","name","formSubmitted","backPage","event","preventDefault","resetErrorMessage","then","result","$nextTick","hasError","forgotPassword","data","errorList","$router","go","computed","methods"],"mappings":"oNAKqBA,EAArB,wKAkBI,WAAY,WACR,OAAOC,OAAOC,KAAKC,KAAKC,QAAQC,QAAO,SAACC,EAAcC,GAClD,OAAOD,GAAO,EAAKF,OAAOG,GAAKC,OAAS,KACzC,KArBX,wBAwBI,WACI,IAAIC,EAAkB,GAEtB,IAAK,IAAMC,KAASP,KAAKC,OACrB,GAAID,KAAKC,OAAOM,GAAOF,OAAS,EAE5B,OADAC,EAAUN,KAAKC,OAAOM,GAAO,GACtBD,EAGf,OAAOA,IAjCf,+BAoCc,WAAiB,WAEvBR,OAAOC,KAAKC,KAAKC,QAAQO,SAAQ,SAACJ,GAC9B,EAAKH,OAAOG,GAAO,UAvC/B,GAA2C,QAAtBP,EAAa,gBADjC,QACoBA,GAAA,U,kNCeAY,EAArB,wDAUI,WAAYC,GAAU,oCAClB,cAAMA,GAVF,EAAAC,WAAqB,EAErB,EAAAC,WAAqB,EACrB,EAAAC,SAA8B,CAClCC,MAAO,IAQP,EAAKb,OAAS,CACVa,MAAO,IAJO,EAV1B,6CAkBI,WAAM,0BACF,2BAAgB,SAAhB,oBACmB,6BADnB,gBAEmB,4BAFnB,CAGcd,KAAKY,UAAN,eAkBgB,gBAlBhB,yCAmByCZ,KAAKa,SAASC,QAnBvD,kFAqBkB,eArBlB,4BAsB4B,CAAEC,KAAM,UAtBpC,MAsBqD,oBAtBrD,cACK,CAAC,EAAD,wDAEe,IAFf,OAE0B,OAF1B,6BAEuDf,KAAKgB,gBAF5D,gBAGkB,CAAE,aAAe,EAAM,iBAAkBhB,KAAKC,OAAOa,MAAMT,OAAS,IAHtF,uBAIqB,SAJrB,MAImC,WAJnC,4EAKmF,EAAKQ,SALxF,sCAKsB,QALtB,GAKiC,QALjC,KAK8C,QAL9C,YAKkE,SALlE,gBAKmF,EAAKA,SAASC,QALjG,iCAKmF,EAAKD,SAASC,MALjG,mBAMWd,KAAKC,OAAOa,MAAMT,OAAS,EAA3B,gBAA2C,eAA3C,CAA0DL,KAAKC,OAAOa,MAAM,KAAa,OANpG,eAQiB,eARjB,yBASuB,UATvB,MASsC,oBATtC,CAUed,KAAKW,UAAL,gBAA8B,yBAAkC,KAV/E,uCAakB,KAblB,MAa4B,OAb5B,UAa4CX,KAAKiB,WAbjD,uBAvB1B,oFA2DI,WAAoBC,GAApB,mGACIA,EAAMC,iBACNnB,KAAKoB,oBAFT,SAIU,eAASpB,KAAKa,SAASC,MAAO,uBAAwB,CAAEC,KAAM,UAC/DM,MAAK,SAAAC,GACF,EAAKrB,OAAO,SAAWqB,EAAOrB,UAN1C,OASID,KAAKuB,UAAL,wCAAe,uGACN,EAAKC,SADC,wBAEP,EAAKb,WAAY,EAFV,kBAKgB,EAAKc,eAAe,EAAKZ,SAASC,OALlD,OAKGY,EALH,OAOEA,IACD,EAAKzB,OAAL,iCAAmB,EAAKA,QAAW,EAAK0B,YARzC,uBAaH,EAAKhB,WAAY,EAbd,0EATnB,gDA3DJ,gFAuFI,SAASO,GACLA,EAAMC,iBAENnB,KAAK4B,QAAQC,IAAI,OA1FzB,GAA4C,QAAvBpB,EAAc,gBAZlC,eAAU,CACPqB,SAAU,kBACH,eAAW,CACVH,UAAW,0BAGnBI,QAAS,kBACF,eAAW,CACVN,eAAgB,4BAIPhB,GAAA","file":"js/chunk-288510c6.f242bbf9.js","sourcesContent":["import { iErrorMessage } from '@/interfaces/auth'\r\nimport { Component, Vue } from 'vue-property-decorator'\r\n\r\n// let timer: any\r\n@Component\r\nexport default class FormComponent extends Vue {\r\n    protected errors!: iErrorMessage\r\n\r\n    // @Watch('errors', { deep: true })\r\n    // errorWatcher() {\r\n    //     if (timer)\r\n    //         return\r\n\r\n    //     timer = setTimeout(() => {\r\n    //         this.resetErrorMessage()\r\n    //     }, 7000)\r\n    // }\r\n\r\n    /**\r\n    * Checks if there are any errors\r\n    * \r\n    * @returns boolean\r\n    */\r\n    get hasError(): boolean {\r\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\r\n            return acc || this.errors[key].length > 0\r\n        }, false)\r\n    }\r\n\r\n    get errorMessage(): string {\r\n        let message: string = ''\r\n\r\n        for (const field in this.errors) {\r\n            if (this.errors[field].length > 0) {\r\n                message = this.errors[field][0]\r\n                return message\r\n            }\r\n        }\r\n        return message\r\n    }\r\n\r\n    protected resetErrorMessage(): void {\r\n\r\n        Object.keys(this.errors).forEach((key: string) => {\r\n            this.errors[key] = []\r\n        })\r\n    }\r\n}\r\n","import { VNode } from \"vue\"\r\nimport { Component } from \"vue-property-decorator\"\r\nimport { validate } from \"vee-validate\"\r\nimport { mapActions, mapGetters } from \"vuex\"\r\n\r\nimport FormComponent from \"@/core/FormComponent\"\r\nimport { iErrorMessage } from \"@/interfaces/auth\"\r\n\r\n@Component({\r\n    computed: {\r\n        ...mapGetters({\r\n            errorList: 'root/getErrorMessage',\r\n        })\r\n    },\r\n    methods: {\r\n        ...mapActions({\r\n            forgotPassword: 'root/forgotPassword'\r\n        })\r\n    }\r\n})\r\nexport default class ForgotPassword extends FormComponent {\r\n    private isLoading: boolean = false\r\n    private errorList?: iErrorMessage\r\n    private isSuccess: boolean = false\r\n    private formData: { email: string } = {\r\n        email: '',\r\n    }\r\n\r\n    private forgotPassword!: (email: string) => Promise<boolean>\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n\r\n        this.errors = {\r\n            email: [],\r\n        }\r\n    }\r\n\r\n    render(): VNode {\r\n        return <main id=\"main\">\r\n            <section class=\"forgot__password__section\">\r\n                <div class=\"forgot__password__holder\">\r\n                    {!this.isSuccess\r\n                        ? [\r\n                            <h1>Forgot Your password?</h1>,\r\n                            <form action=\"#\" method=\"POST\" no-validate onSubmit={this.formSubmitted}>\r\n                                <div class={{ 'form__group': true, 'input--invalid': this.errors.email.length > 0 }}>\r\n                                    <label for=\"email\" class=\"sr-only\">Email</label>\r\n                                    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email\" v-model={this.formData.email} />\r\n                                    {this.errors.email.length > 0 ? <span class=\"input__text\">{this.errors.email[0]}</span> : null}\r\n                                </div>\r\n                                <div class=\"btn__holder\">\r\n                                    <button type=\"submit\" class=\"btn btn__primary\">\r\n                                        {this.isLoading ? (<span class=\"icon-spinner loading\"></span>) : null}\r\n                                        Reset password?\r\n                                    </button>\r\n                                    <a href=\"#\" class=\"back\" onClick={this.backPage}>back</a>\r\n                                </div>\r\n                            </form>\r\n                        ]\r\n                        : <div class=\"text--center\">\r\n                            <h1>A mail has been sent to your {this.formData.email}</h1>\r\n                            <p>Please follow the link on email to reset your password.</p>\r\n                            <div class=\"btn__holder\">\r\n                                <router-link to={{ name: 'login' }} class=\"btn btn__success\">Okay</router-link>\r\n                            </div>\r\n                        </div>}\r\n                </div>\r\n            </section>\r\n        </main>\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param event \r\n     * HTML Form submit event\r\n     * \r\n     * @returns void\r\n     */\r\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\r\n        event.preventDefault()\r\n        this.resetErrorMessage()\r\n\r\n        await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\r\n            .then(result => {\r\n                this.errors['email'] = result.errors\r\n            })\r\n\r\n        this.$nextTick(async () => {\r\n            if (!this.hasError) {\r\n                this.isLoading = true\r\n\r\n                try {\r\n                    const data = await this.forgotPassword(this.formData.email)\r\n\r\n                    if (!data) {\r\n                        this.errors = { ...this.errors, ...this.errorList }\r\n                    } else {\r\n                        // this.isSuccess = true\r\n                    }\r\n                } finally {\r\n                    this.isLoading = false\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    backPage(event: MouseEvent): void {\r\n        event.preventDefault()\r\n\r\n        this.$router.go(-1)\r\n    }\r\n}"],"sourceRoot":""}