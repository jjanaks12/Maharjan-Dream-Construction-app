{"version":3,"sources":["webpack:///./src/core/FormComponent.tsx","webpack:///./src/pages/account/ChangePassword.tsx"],"names":["FormComponent","Object","keys","this","errors","reduce","acc","key","length","message","field","forEach","ChangePassword","props","isSaving","formData","old_password","password","password_confirmation","formSubmitted","event","preventDefault","resetErrorMessage","name","then","result","values","confirmation","$nextTick","hasError","userDetail","uuid","changePassword","id","$router","push","finally","computed","methods"],"mappings":"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","file":"js/chunk-2882e570.c9757733.js","sourcesContent":["import { iErrorMessage } from '@/interfaces/auth'\r\nimport { Component, Vue } from 'vue-property-decorator'\r\n\r\n// let timer: any\r\n@Component\r\nexport default class FormComponent extends Vue {\r\n    protected errors!: iErrorMessage\r\n\r\n    // @Watch('errors', { deep: true })\r\n    // errorWatcher() {\r\n    //     if (timer)\r\n    //         return\r\n\r\n    //     timer = setTimeout(() => {\r\n    //         this.resetErrorMessage()\r\n    //     }, 7000)\r\n    // }\r\n\r\n    /**\r\n    * Checks if there are any errors\r\n    * \r\n    * @returns boolean\r\n    */\r\n    get hasError(): boolean {\r\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\r\n            return acc || this.errors[key].length > 0\r\n        }, false)\r\n    }\r\n\r\n    get errorMessage(): string {\r\n        let message: string = ''\r\n\r\n        for (const field in this.errors) {\r\n            if (this.errors[field].length > 0) {\r\n                message = this.errors[field][0]\r\n                return message\r\n            }\r\n        }\r\n        return message\r\n    }\r\n\r\n    protected resetErrorMessage(): void {\r\n\r\n        Object.keys(this.errors).forEach((key: string) => {\r\n            this.errors[key] = []\r\n        })\r\n    }\r\n}\r\n","import { VNode } from 'vue'\r\nimport { Component } from 'vue-property-decorator'\r\nimport { validate } from 'vee-validate'\r\nimport { mapActions, mapGetters } from 'vuex'\r\n\r\nimport FormComponent from '@/core/FormComponent'\r\nimport { iPassword, iUserDetail } from '@/interfaces/auth'\r\n\r\n@Component({\r\n    computed: {\r\n        ...mapGetters({\r\n            userDetail: 'root/getLoggedinUser'\r\n        })\r\n    },\r\n    methods: {\r\n        ...mapActions({\r\n            changePassword: 'root/changePassword'\r\n        })\r\n    }\r\n})\r\nexport default class ChangePassword extends FormComponent {\r\n    private isSaving: boolean = false\r\n    private userDetail!: iUserDetail\r\n    private changePassword!: (formData: iPassword) => Promise<boolean>\r\n    private formData: iPassword = {\r\n        old_password: '',\r\n        password: '',\r\n        password_confirmation: '',\r\n    }\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n\r\n        this.errors = {\r\n            old_password: [],\r\n            password: [],\r\n            password_confirmation: [],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns VNode\r\n     */\r\n    render(): VNode {\r\n        return (<main id=\"main\">\r\n            <section class=\"item__section\">\r\n                <header class=\"item__section__heading\">\r\n                    <h2>Change Password</h2>\r\n                </header>\r\n                <form action=\"#\" class=\"change__password__form\" onSubmit={this.formSubmitted} novalidate>\r\n                    <div class=\"form__group\">\r\n                        <label for=\"old_password\">Old Password</label>\r\n                        <input type=\"password\" name=\"old_password\" id=\"old_password\" v-model={this.formData.old_password} />\r\n                        {this.errors.old_password.length > 0 ? (<span class=\"input__text\">{this.errors.old_password[0]}</span>) : null}\r\n                    </div>\r\n                    <div class=\"form__group\">\r\n                        <label for=\"new_password\">New Password</label>\r\n                        <input type=\"password\" name=\"new_password\" id=\"new_password\" v-model={this.formData.password} />\r\n                        {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\r\n                    </div>\r\n                    <div class=\"form__group\">\r\n                        <label for=\"confirm_password\">Confirm New Password</label>\r\n                        <input type=\"password\" name=\"confirm_password\" id=\"confirm_password\" v-model={this.formData.password_confirmation} />\r\n                        {this.errors.password_confirmation.length > 0 ? (<span class=\"input__text\">{this.errors.password_confirmation[0]}</span>) : null}\r\n                    </div>\r\n                    <div class=\"btn__holder\">\r\n                        <div class=\"btn__block\">\r\n                            <button type=\"submit\" class=\"btn btn__primary\">\r\n                                {this.isSaving ? (<span class=\"icon-spinner loading\"></span>) : null}\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n        </main>)\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param event \r\n     * HTML Form submit event\r\n     * \r\n     * @returns void\r\n     */\r\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\r\n        event.preventDefault()\r\n        this.resetErrorMessage()\r\n\r\n        await validate(this.formData.old_password, 'required|min:6', { name: 'email' })\r\n            .then(result => {\r\n                this.errors['old_password'] = result.errors\r\n            })\r\n\r\n        await validate(this.formData.password, 'required|min:6|confirmed:confirmation', { name: 'password', values: { confirmation: this.formData.password_confirmation } })\r\n            .then(result => {\r\n                this.errors['password'] = result.errors\r\n            })\r\n\r\n        await validate(this.formData.password_confirmation, 'required|min:6', { name: 'password' })\r\n            .then(result => {\r\n                this.errors['password_confirmation'] = result.errors\r\n            })\r\n\r\n        this.$nextTick(() => {\r\n\r\n            if (!this.hasError && this.userDetail.uuid) {\r\n                this.isSaving = true\r\n\r\n                this.changePassword({\r\n                    id: this.userDetail.uuid,\r\n                    ...this.formData\r\n                })\r\n                    .then(() => {\r\n                        this.$router.push({ name: 'account' })\r\n                    })\r\n                    .finally(() => {\r\n                        this.isSaving = false\r\n                    })\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":""}