{"version":3,"sources":["webpack:///./src/pages/training/Detail.tsx"],"names":["TrainingDetail","hasEnrolled","training","title","excerpt","description","duration","duration_type","price","start_date","this","checkRoute","isLoggedIn","id","checkEnrolled","moment","diff","event","preventDefault","$router","go","local","format","remainingDay","enroll","then","$route","params","getTraining","isEnrolled","data","$forceUpdate","Vue","__decorate","Watch","deep","Component","computed","mapGetters","methods","mapActions"],"mappings":"8RAqBqBA,EAAc,wDAAnC,iD,0BAKY,EAAAC,aAAuB,EAEvB,EAAAC,SAAsB,CAC1BC,MAAO,GACPC,QAAS,GACTC,YAAa,GACbC,SAAU,GACVC,cAAe,GACfC,MAAO,GACPC,WAAY,IAdpB,EAAmC,mDAkB/B,WACIC,KAAKC,eAnBsB,6BAuB/B,WACQD,KAAKE,YAAcF,KAAKR,SAASW,IACjCH,KAAKI,kBAzBkB,qBA6B/B,WACIJ,KAAKC,eA9BsB,wBAiC/B,WACI,OAAOI,IAAOL,KAAKR,SAASO,YAAYO,KAAKD,MAAU,UAlC5B,oBAqC/B,WAAM,0BACF,2BAAiB,SAAjB,oBACmB,mCADnB,gBAEmB,gBAFnB,CAGcL,KAAKE,WAUD,KAVL,kBACmB,gBADnB,gBAEkB,gBAFlB,oBAImB,KAJnB,UAIgC,SAACK,GAClBA,EAAMC,iBACN,EAAKC,QAAQC,IAAI,KANhC,MAOoB,QAPpB,iBAOuC,4BAVpD,eAcuB,6BAdvB,eAe0B,SAf1B,CAemCV,KAAKR,SAASC,QAfjD,eAgB2B,UAhB3B,eAiB8B,SAjB9B,kBAiBiDO,KAAKR,SAASM,QAjB/D,QAiBkFE,KAAKR,SAASI,SAAUI,KAAKR,SAASK,gBAjBxH,gBAkBgC,QAlBhC,cAkBkDQ,IAAOL,KAAKR,SAASO,YAAYY,QAAQC,OAAO,iCAlBlG,eAoB2B,eApB3B,oBAoB6DZ,KAAKR,SAASG,mBApB3E,kBAuBsB,yBAvBtB,CAwBaK,KAAKE,WACAF,KAAKT,YACD,KACAS,KAAKa,aAAe,EAChB,CAAC,EAAD,cACc,cADd,CAC4Bb,KAAKa,aADjC,OACmDb,KAAKa,aAAe,EAAI,IAAM,GADjF,kDAEU,KAFV,MAEoB,2BAFpB,UAEwD,SAACN,GACnDA,EAAMC,iBACN,EAAKM,OAAO,EAAKtB,UACZuB,MAAK,WACF,EAAKX,sBANnB,iBADJ,eAWe,UAXf,sFAeJ,aAhFS,iFAuF/B,+GACUD,EADV,UACeH,KAAKgB,cADpB,iBACe,EAAaC,cAD5B,aACe,EAAqBd,GADpC,SAE0BH,KAAKkB,YAAYf,GAF3C,OAEIH,KAAKR,SAFT,uDAvF+B,6IA4F/B,yHACUQ,KAAKmB,WAAWnB,KAAKR,UACtBuB,MAAK,SAACK,GAECA,IACA,EAAK7B,aAAc,EACnB,EAAK8B,mBANrB,gDA5F+B,8DAASC,QAkBxCC,gBADCC,eAAM,SAAU,CAAEC,MAAM,KACzB,iCAKAF,gBADCC,eAAM,aACP,oCAvBiBlC,EAAc,gBAdlCoC,eAAU,CACPC,SAAU,kBACHC,eAAW,CACV1B,WAAY,qBAGpB2B,QAAS,kBACFC,eAAW,CACVZ,YAAa,uBACbJ,OAAQ,kBACRK,WAAY,4BAIH7B","file":"js/chunk-2d0c8f9b.3f766469.js","sourcesContent":["import { VNode } from 'vue'\nimport { Component, Vue, Watch } from 'vue-property-decorator'\nimport { mapActions, mapGetters } from 'vuex'\n\nimport { iTraining } from '@/interfaces/app'\nimport moment from 'moment'\n\n@Component({\n    computed: {\n        ...mapGetters({\n            isLoggedIn: 'root/isLoggedIn'\n        })\n    },\n    methods: {\n        ...mapActions({\n            getTraining: 'training/getTraining',\n            enroll: 'training/enroll',\n            isEnrolled: 'training/isEnrolled',\n        })\n    }\n})\nexport default class TrainingDetail extends Vue {\n    private isLoggedIn!: boolean\n    private getTraining!: (id: string) => iTraining\n    private isEnrolled!: (training: iTraining) => Promise<boolean>\n    private enroll!: (training: iTraining) => Promise<boolean>\n    private hasEnrolled: boolean = false\n\n    private training: iTraining = {\n        title: '',\n        excerpt: '',\n        description: '',\n        duration: '',\n        duration_type: '',\n        price: '',\n        start_date: '',\n    }\n\n    @Watch('$route', { deep: true })\n    routeWatcher() {\n        this.checkRoute()\n    }\n\n    @Watch('training')\n    trainingUpdated() {\n        if (this.isLoggedIn && this.training.id) {\n            this.checkEnrolled()\n        }\n    }\n\n    mounted() {\n        this.checkRoute()\n    }\n\n    get remainingDay(): number {\n        return moment(this.training.start_date).diff(moment(), 'days')\n    }\n\n    render(): VNode {\n        return (<main id=\"main\">\n            <section class=\"item__section training__section\">\n                <div class=\"item__detail\">\n                    {!this.isLoggedIn\n                        ? <header class=\"item__header\">\n                            <div class=\"item__action\">\n                                {/* Back to detail Page */}\n                                <a href=\"#\" onClick={(event: MouseEvent) => {\n                                    event.preventDefault()\n                                    this.$router.go(-1)\n                                }} class=\"back\"><span class=\"icon-d-arrow-left\"></span></a>\n                            </div>\n                        </header>\n                        : null}\n                    <div class=\"item__detail__description\">\n                        <h1 class=\"title\">{this.training.title}</h1>\n                        <div class=\"holder\">\n                            <em class=\"price\"><span>Rs. {this.training.price}</span> for {this.training.duration}{this.training.duration_type}</em>\n                            <span class=\"date\">Starts on {moment(this.training.start_date).local().format('Do [of] MMM, [at] hh:mm a')}</span>\n                        </div>\n                        <div class=\"text__holder\" domPropsInnerHTML={this.training.description} />\n                    </div>\n                </div>\n                <footer class=\"item__section__footer\">\n                    {this.isLoggedIn\n                        ? this.hasEnrolled\n                            ? null\n                            : this.remainingDay > 0\n                                ? [\n                                    <span class=\"day__count\">{this.remainingDay} day{this.remainingDay > 1 ? 's' : ''} left till Training starts</span>,\n                                    <a href=\"#\" class=\"btn btn__success btn__xs\" onClick={(event: MouseEvent) => {\n                                        event.preventDefault()\n                                        this.enroll(this.training)\n                                            .then(() => {\n                                                this.checkEnrolled()\n                                            })\n                                    }}>Enroll now</a>\n                                ]\n                                : <div class=\"notice\">\n                                    <strong>This training is over</strong>\n                                    <p>Please wait for new date release.</p>\n                                </div>\n                        : null\n                    }\n                </footer>\n            </section>\n        </main>)\n    }\n\n    async checkRoute() {\n        const id = this.$route?.params?.id as string\n        this.training = await this.getTraining(id)\n    }\n\n    async checkEnrolled() {\n        await this.isEnrolled(this.training)\n            .then((data) => {\n\n                if (data) {\n                    this.hasEnrolled = true\n                    this.$forceUpdate()\n                }\n            })\n    }\n}\n"],"sourceRoot":""}