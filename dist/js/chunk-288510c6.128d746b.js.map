{"version":3,"sources":["webpack:///./src/core/FormComponent.tsx","webpack:///./src/pages/account/ForgotPassword.tsx"],"names":["FormComponent","Object","keys","this","errors","reduce","acc","key","length","message","field","forEach","Vue","Component","ForgotPassword","props","isLoading","isSuccess","formData","email","name","formSubmitted","backPage","event","preventDefault","resetErrorMessage","validate","then","result","$nextTick","hasError","forgotPassword","data","errorList","$router","go","computed","mapGetters","methods","mapActions"],"mappings":"8NAKqBA,EAAa,wKAkB9B,WAAY,WACR,OAAOC,OAAOC,KAAKC,KAAKC,QAAQC,QAAO,SAACC,EAAcC,GAClD,OAAOD,GAAO,EAAKF,OAAOG,GAAKC,OAAS,KACzC,KArBuB,wBAwB9B,WACI,IAAIC,EAAkB,GAEtB,IAAK,IAAMC,KAASP,KAAKC,OACrB,GAAID,KAAKC,OAAOM,GAAOF,OAAS,EAE5B,OADAC,EAAUN,KAAKC,OAAOM,GAAO,GACtBD,EAGf,OAAOA,IAjCmB,+BAoCpB,WAAiB,WAEvBR,OAAOC,KAAKC,KAAKC,QAAQO,SAAQ,SAACJ,GAC9B,EAAKH,OAAOG,GAAO,UAvCG,GAASK,QAAtBZ,EAAa,gBADjCa,QACoBb,a,kNCeAc,EAAc,wDAU/B,WAAYC,GAAU,oCAClB,cAAMA,GAVF,EAAAC,WAAqB,EAErB,EAAAC,WAAqB,EACrB,EAAAC,SAA8B,CAClCC,MAAO,IAQP,EAAKf,OAAS,CACVe,MAAO,IAJO,EAVS,6CAkB/B,WAAM,0BACF,2BAAgB,SAAhB,oBACmB,6BADnB,gBAEmB,4BAFnB,CAGchB,KAAKc,UAAN,eAkBgB,gBAlBhB,yCAmByCd,KAAKe,SAASC,QAnBvD,kFAqBkB,eArBlB,4BAsB4B,CAAEC,KAAM,UAtBpC,MAsBqD,oBAtBrD,cACK,CAAC,EAAD,wDAEe,IAFf,OAE0B,OAF1B,6BAEuDjB,KAAKkB,gBAF5D,gBAGkB,CAAE,aAAe,EAAM,iBAAkBlB,KAAKC,OAAOe,MAAMX,OAAS,IAHtF,uBAIqB,SAJrB,MAImC,WAJnC,4EAKmF,EAAKU,SALxF,sCAKsB,QALtB,GAKiC,QALjC,KAK8C,QAL9C,YAKkE,SALlE,gBAKmF,EAAKA,SAASC,QALjG,iCAKmF,EAAKD,SAASC,MALjG,mBAMWhB,KAAKC,OAAOe,MAAMX,OAAS,EAA3B,gBAA2C,eAA3C,CAA0DL,KAAKC,OAAOe,MAAM,KAAa,OANpG,eAQiB,eARjB,yBASuB,UATvB,MASsC,oBATtC,CAUehB,KAAKa,UAAL,gBAA8B,yBAAkC,KAV/E,uCAakB,KAblB,MAa4B,OAb5B,UAa4Cb,KAAKmB,WAbjD,uBAvBS,oFA2D/B,WAAoBC,GAApB,mGACIA,EAAMC,iBACNrB,KAAKsB,oBAFT,SAIUC,eAASvB,KAAKe,SAASC,MAAO,uBAAwB,CAAEC,KAAM,UAC/DO,MAAK,SAAAC,GACF,EAAKxB,OAAO,SAAWwB,EAAOxB,UAN1C,OASID,KAAK0B,UAAL,wCAAe,uGACN,EAAKC,SADC,wBAEP,EAAKd,WAAY,EAFV,kBAKgB,EAAKe,eAAe,EAAKb,SAASC,OALlD,OAKGa,EALH,OAOEA,IACD,EAAK5B,OAAL,iCAAmB,EAAKA,QAAW,EAAK6B,YARzC,uBAaH,EAAKjB,WAAY,EAbd,0EATnB,gDA3D+B,gFAuF/B,SAASO,GACLA,EAAMC,iBAENrB,KAAK+B,QAAQC,IAAI,OA1FU,GAASnC,QAAvBc,EAAc,gBAZlCD,eAAU,CACPuB,SAAU,kBACHC,eAAW,CACVJ,UAAW,0BAGnBK,QAAS,kBACFC,eAAW,CACVR,eAAgB,4BAIPjB","file":"js/chunk-288510c6.128d746b.js","sourcesContent":["import { iErrorMessage } from '@/interfaces/auth'\nimport { Component, Vue } from 'vue-property-decorator'\n\n// let timer: any\n@Component\nexport default class FormComponent extends Vue {\n    protected errors!: iErrorMessage\n\n    // @Watch('errors', { deep: true })\n    // errorWatcher() {\n    //     if (timer)\n    //         return\n\n    //     timer = setTimeout(() => {\n    //         this.resetErrorMessage()\n    //     }, 7000)\n    // }\n\n    /**\n    * Checks if there are any errors\n    * \n    * @returns boolean\n    */\n    get hasError(): boolean {\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\n            return acc || this.errors[key].length > 0\n        }, false)\n    }\n\n    get errorMessage(): string {\n        let message: string = ''\n\n        for (const field in this.errors) {\n            if (this.errors[field].length > 0) {\n                message = this.errors[field][0]\n                return message\n            }\n        }\n        return message\n    }\n\n    protected resetErrorMessage(): void {\n\n        Object.keys(this.errors).forEach((key: string) => {\n            this.errors[key] = []\n        })\n    }\n}\n","import { VNode } from \"vue\"\nimport { Component } from \"vue-property-decorator\"\nimport { validate } from \"vee-validate\"\nimport { mapActions, mapGetters } from \"vuex\"\n\nimport FormComponent from \"@/core/FormComponent\"\nimport { iErrorMessage } from \"@/interfaces/auth\"\n\n@Component({\n    computed: {\n        ...mapGetters({\n            errorList: 'root/getErrorMessage',\n        })\n    },\n    methods: {\n        ...mapActions({\n            forgotPassword: 'root/forgotPassword'\n        })\n    }\n})\nexport default class ForgotPassword extends FormComponent {\n    private isLoading: boolean = false\n    private errorList?: iErrorMessage\n    private isSuccess: boolean = false\n    private formData: { email: string } = {\n        email: '',\n    }\n\n    private forgotPassword!: (email: string) => Promise<boolean>\n\n    constructor(props: any) {\n        super(props)\n\n        this.errors = {\n            email: [],\n        }\n    }\n\n    render(): VNode {\n        return <main id=\"main\">\n            <section class=\"forgot__password__section\">\n                <div class=\"forgot__password__holder\">\n                    {!this.isSuccess\n                        ? [\n                            <h1>Forgot Your password?</h1>,\n                            <form action=\"#\" method=\"POST\" no-validate onSubmit={this.formSubmitted}>\n                                <div class={{ 'form__group': true, 'input--invalid': this.errors.email.length > 0 }}>\n                                    <label for=\"email\" class=\"sr-only\">Email</label>\n                                    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email\" v-model={this.formData.email} />\n                                    {this.errors.email.length > 0 ? <span class=\"input__text\">{this.errors.email[0]}</span> : null}\n                                </div>\n                                <div class=\"btn__holder\">\n                                    <button type=\"submit\" class=\"btn btn__primary\">\n                                        {this.isLoading ? (<span class=\"icon-spinner loading\"></span>) : null}\n                                        Reset password?\n                                    </button>\n                                    <a href=\"#\" class=\"back\" onClick={this.backPage}>back</a>\n                                </div>\n                            </form>\n                        ]\n                        : <div class=\"text--center\">\n                            <h1>A mail has been sent to your {this.formData.email}</h1>\n                            <p>Please follow the link on email to reset your password.</p>\n                            <div class=\"btn__holder\">\n                                <router-link to={{ name: 'login' }} class=\"btn btn__success\">Okay</router-link>\n                            </div>\n                        </div>}\n                </div>\n            </section>\n        </main>\n    }\n\n    /**\n     * \n     * @param event \n     * HTML Form submit event\n     * \n     * @returns void\n     */\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\n        event.preventDefault()\n        this.resetErrorMessage()\n\n        await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\n            .then(result => {\n                this.errors['email'] = result.errors\n            })\n\n        this.$nextTick(async () => {\n            if (!this.hasError) {\n                this.isLoading = true\n\n                try {\n                    const data = await this.forgotPassword(this.formData.email)\n\n                    if (!data) {\n                        this.errors = { ...this.errors, ...this.errorList }\n                    } else {\n                        // this.isSuccess = true\n                    }\n                } finally {\n                    this.isLoading = false\n                }\n            }\n        })\n    }\n\n    backPage(event: MouseEvent): void {\n        event.preventDefault()\n\n        this.$router.go(-1)\n    }\n}"],"sourceRoot":""}