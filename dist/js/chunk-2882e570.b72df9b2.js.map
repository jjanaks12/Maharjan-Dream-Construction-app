{"version":3,"sources":["webpack:///./src/core/FormComponent.tsx","webpack:///./src/pages/account/ChangePassword.tsx"],"names":["FormComponent","Object","keys","this","errors","reduce","acc","key","length","message","field","forEach","Vue","Component","ChangePassword","props","isSaving","formData","old_password","password","password_confirmation","formSubmitted","event","preventDefault","resetErrorMessage","validate","name","then","result","values","confirmation","$nextTick","hasError","userDetail","uuid","changePassword","id","$router","push","finally","computed","mapGetters","methods","mapActions"],"mappings":"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","file":"js/chunk-2882e570.b72df9b2.js","sourcesContent":["import { iErrorMessage } from '@/interfaces/auth'\nimport { Component, Vue } from 'vue-property-decorator'\n\n// let timer: any\n@Component\nexport default class FormComponent extends Vue {\n    protected errors!: iErrorMessage\n\n    // @Watch('errors', { deep: true })\n    // errorWatcher() {\n    //     if (timer)\n    //         return\n\n    //     timer = setTimeout(() => {\n    //         this.resetErrorMessage()\n    //     }, 7000)\n    // }\n\n    /**\n    * Checks if there are any errors\n    * \n    * @returns boolean\n    */\n    get hasError(): boolean {\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\n            return acc || this.errors[key].length > 0\n        }, false)\n    }\n\n    get errorMessage(): string {\n        let message: string = ''\n\n        for (const field in this.errors) {\n            if (this.errors[field].length > 0) {\n                message = this.errors[field][0]\n                return message\n            }\n        }\n        return message\n    }\n\n    protected resetErrorMessage(): void {\n\n        Object.keys(this.errors).forEach((key: string) => {\n            this.errors[key] = []\n        })\n    }\n}\n","import { VNode } from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { validate } from 'vee-validate'\nimport { mapActions, mapGetters } from 'vuex'\n\nimport FormComponent from '@/core/FormComponent'\nimport { iPassword, iUserDetail } from '@/interfaces/auth'\n\n@Component({\n    computed: {\n        ...mapGetters({\n            userDetail: 'root/getLoggedinUser'\n        })\n    },\n    methods: {\n        ...mapActions({\n            changePassword: 'root/changePassword'\n        })\n    }\n})\nexport default class ChangePassword extends FormComponent {\n    private isSaving: boolean = false\n    private userDetail!: iUserDetail\n    private changePassword!: (formData: iPassword) => Promise<boolean>\n    private formData: iPassword = {\n        old_password: '',\n        password: '',\n        password_confirmation: '',\n    }\n\n    constructor(props: any) {\n        super(props)\n\n        this.errors = {\n            old_password: [],\n            password: [],\n            password_confirmation: [],\n        }\n    }\n\n    /**\n     * @returns VNode\n     */\n    render(): VNode {\n        return (<main id=\"main\">\n            <section class=\"item__section\">\n                <header class=\"item__section__heading\">\n                    <h2>Change Password</h2>\n                </header>\n                <form action=\"#\" class=\"change__password__form\" onSubmit={this.formSubmitted} novalidate>\n                    <div class=\"form__group\">\n                        <label for=\"old_password\">Old Password</label>\n                        <input type=\"password\" name=\"old_password\" id=\"old_password\" v-model={this.formData.old_password} />\n                        {this.errors.old_password.length > 0 ? (<span class=\"input__text\">{this.errors.old_password[0]}</span>) : null}\n                    </div>\n                    <div class=\"form__group\">\n                        <label for=\"new_password\">New Password</label>\n                        <input type=\"password\" name=\"new_password\" id=\"new_password\" v-model={this.formData.password} />\n                        {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\n                    </div>\n                    <div class=\"form__group\">\n                        <label for=\"confirm_password\">Confirm New Password</label>\n                        <input type=\"password\" name=\"confirm_password\" id=\"confirm_password\" v-model={this.formData.password_confirmation} />\n                        {this.errors.password_confirmation.length > 0 ? (<span class=\"input__text\">{this.errors.password_confirmation[0]}</span>) : null}\n                    </div>\n                    <div class=\"btn__holder\">\n                        <div class=\"btn__block\">\n                            <button type=\"submit\" class=\"btn btn__primary\">\n                                {this.isSaving ? (<span class=\"icon-spinner loading\"></span>) : null}\n                                Save\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </section>\n        </main>)\n    }\n\n    /**\n     * \n     * @param event \n     * HTML Form submit event\n     * \n     * @returns void\n     */\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\n        event.preventDefault()\n        this.resetErrorMessage()\n\n        await validate(this.formData.old_password, 'required|min:6', { name: 'email' })\n            .then(result => {\n                this.errors['old_password'] = result.errors\n            })\n\n        await validate(this.formData.password, 'required|min:6|confirmed:confirmation', { name: 'password', values: { confirmation: this.formData.password_confirmation } })\n            .then(result => {\n                this.errors['password'] = result.errors\n            })\n\n        await validate(this.formData.password_confirmation, 'required|min:6', { name: 'password' })\n            .then(result => {\n                this.errors['password_confirmation'] = result.errors\n            })\n\n        this.$nextTick(() => {\n\n            if (!this.hasError && this.userDetail.uuid) {\n                this.isSaving = true\n\n                this.changePassword({\n                    id: this.userDetail.uuid,\n                    ...this.formData\n                })\n                    .then(() => {\n                        this.$router.push({ name: 'account' })\n                    })\n                    .finally(() => {\n                        this.isSaving = false\n                    })\n            }\n        })\n    }\n}\n"],"sourceRoot":""}