{"version":3,"sources":["webpack:///./src/pages/Register.tsx","webpack:///./src/core/FormComponent.tsx"],"names":["Register","isLoggingIn","isSuccess","formData","name","address","password","confirm_password","phone","email","errors","this","event","preventDefault","$router","push","query","formSubmitted","length","resetErrorMessage","validate","then","result","values","confirmation","$nextTick","hasError","register","errorList","finally","FormComponent","Component","computed","mapGetters","methods","mapActions","Object","keys","reduce","acc","key","message","field","forEach","Vue"],"mappings":"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","file":"js/chunk-28b26c2a.d6b637ca.js","sourcesContent":["import { iErrorMessage, iUserDetail } from '@/interfaces/auth'\nimport FormComponent from '@/core/FormComponent'\n\nimport { validate } from 'vee-validate'\nimport { VNode } from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { mapActions, mapGetters } from 'vuex'\n\n@Component({\n    computed: {\n        ...mapGetters({\n            errorList: 'root/getErrorMessage'\n        })\n    },\n    methods: {\n        ...mapActions({\n            register: 'root/register'\n        })\n    }\n})\nexport default class Register extends FormComponent {\n    private register!: (formData: iUserDetail) => Promise<boolean>\n    private isLoggingIn: boolean = false\n    private errorList?: iErrorMessage\n    private isSuccess: boolean = false\n    private formData: iUserDetail = {\n        name: '',\n        address: '',\n        password: '',\n        confirm_password: '',\n        phone: '',\n        email: '',\n    }\n\n    constructor() {\n        super()\n\n        this.errors = {\n            name: [],\n            address: [],\n            password: [],\n            confirm_password: [],\n            phone: [],\n            email: []\n        }\n    }\n\n    /**\n     * \n     * @returns VNode\n     */\n    render(): VNode {\n        return (<section class=\"account__section\">\n            <div class=\"account__section__body\">\n                {!this.isSuccess ? [<h1>Register</h1>,\n                <form action=\"#\" class=\"account__section__form\" onSubmit={this.formSubmitted} novalidate>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.name.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-name\">Full Name</label>\n                        <input type=\"text\" name=\"name\" id=\"asf-name\" placeholder=\"Name\" v-model={this.formData.name} />\n                        {this.errors.name.length > 0 ? (<span class=\"input__text\">{this.errors.name[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.email.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-username\">Username</label>\n                        <input type=\"email\" name=\"username\" id=\"asf-username\" placeholder=\"Email\" v-model={this.formData.email} />\n                        {this.errors.email.length > 0 ? (<span class=\"input__text\">{this.errors.email[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.password.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-password\">Password</label>\n                        <input type=\"password\" name=\"password\" id=\"asf-password\" placeholder=\"Password\" v-model={this.formData.password} />\n                        {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.confirm_password.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-confirm_password\">Confirm Password</label>\n                        <input type=\"password\" name=\"password\" id=\"asf-confirm_password\" placeholder=\"Confirm Password\" v-model={this.formData.confirm_password} />\n                        {this.errors.confirm_password.length > 0 ? (<span class=\"input__text\">{this.errors.confirm_password[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.address.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-address\">Address</label>\n                        <input type=\"text\" name=\"name\" id=\"asf-address\" placeholder=\"Address\" v-model={this.formData.address} />\n                        {this.errors.address.length > 0 ? (<span class=\"input__text\">{this.errors.address[0]}</span>) : null}\n                    </div>\n                    <div class={{ 'form__group': true, 'input--invalid': this.errors.phone.length > 0 }}>\n                        <label class=\"sr-only\" for=\"asf-phone\">Phone</label>\n                        <input type=\"text\" name=\"name\" id=\"asf-phone\" placeholder=\"Phone\" v-model={this.formData.phone} />\n                        {this.errors.phone.length > 0 ? (<span class=\"input__text\">{this.errors.phone[0]}</span>) : null}\n                    </div>\n                    <div class=\"btn__holder\">\n                        <div class=\"btn__block\">\n                            <button type=\"submit\" class=\"btn btn__danger\">\n                                {this.isLoggingIn ? (<span class=\"icon-spinner loading\"></span>) : null}\n                                Register\n                            </button>\n                        </div>\n                        <div class=\"btn__block\">\n                            <span class=\"text\">or</span>\n                        </div>\n                        <div class=\"btn__block\">\n                            <router-link to={{ name: \"login\" }} class=\"btn btn__primary\">login</router-link>\n                        </div>\n                    </div>\n                </form>] : <div class=\"account__message\">\n                    <h2 class=\"h3\">Your account has been created successfully</h2>\n                    <p>Please check you registered email <strong>{this.formData.email}</strong> for verification link.</p>\n                    <a href=\"#\" class=\"btn btn__primary\" onClick={(event: MouseEvent) => {\n                        event.preventDefault();\n                        this.$router.push({\n                            name: 'login', query: {\n                                email: this.formData.email\n                            }\n                        })\n                    }}>Continue</a>\n                </div>}\n            </div>\n        </section >)\n    }\n\n    /**\n     * \n     * @param event \n     * HTML Form submit event\n     * \n     * @returns void\n     */\n    async formSubmitted(event: HTMLFormElement): Promise<void> {\n        event.preventDefault()\n        this.resetErrorMessage()\n\n        await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\n            .then(result => {\n                this.errors['email'] = result.errors\n            })\n\n        await validate(this.formData.name, 'required', { name: 'name' })\n            .then(result => {\n                this.errors['name'] = result.errors\n            })\n\n        await validate(this.formData.address, 'required', { name: 'address' })\n            .then(result => {\n                this.errors['address'] = result.errors\n            })\n\n        await validate(this.formData.password, 'required|min:6|confirmed:confirmation', { name: 'password', values: { confirmation: this.formData.confirm_password } })\n            .then(result => {\n                this.errors['password'] = result.errors\n            })\n\n        await validate(this.formData.confirm_password, 'required', { name: 'confirm_password' })\n            .then(result => {\n                this.errors['confirm_password'] = result.errors\n            })\n\n        this.$nextTick(() => {\n            if (!this.hasError) {\n                this.isLoggingIn = true\n                const formData = { ...this.formData }\n                delete formData.confirm_password\n\n                this.register(formData)\n                    .then(() => {\n                        this.errors = { ...this.errors, ...this.errorList }\n\n                        if (!this.hasError)\n                            this.isSuccess = true\n                    })\n                    .finally(() => {\n                        this.isLoggingIn = false\n                    })\n            }\n        })\n    }\n}\n","import { iErrorMessage } from '@/interfaces/auth'\nimport { Component, Vue } from 'vue-property-decorator'\n\n// let timer: any\n@Component\nexport default class FormComponent extends Vue {\n    protected errors!: iErrorMessage\n\n    // @Watch('errors', { deep: true })\n    // errorWatcher() {\n    //     if (timer)\n    //         return\n\n    //     timer = setTimeout(() => {\n    //         this.resetErrorMessage()\n    //     }, 7000)\n    // }\n\n    /**\n    * Checks if there are any errors\n    * \n    * @returns boolean\n    */\n    get hasError(): boolean {\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\n            return acc || this.errors[key].length > 0\n        }, false)\n    }\n\n    get errorMessage(): string {\n        let message: string = ''\n\n        for (const field in this.errors) {\n            if (this.errors[field].length > 0) {\n                message = this.errors[field][0]\n                return message\n            }\n        }\n        return message\n    }\n\n    protected resetErrorMessage(): void {\n\n        Object.keys(this.errors).forEach((key: string) => {\n            this.errors[key] = []\n        })\n    }\n}\n"],"sourceRoot":""}