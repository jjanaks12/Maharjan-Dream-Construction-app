{"version":3,"sources":["webpack:///./src/components/common/Brand.tsx","webpack:///./src/pages/Login.tsx","webpack:///./src/core/FormComponent.tsx","webpack:///./src/assets/images/logo.svg"],"names":["Brand","name","logo","Vue","Component","Login","isLoggingIn","formData","email","password","errors","this","$nextTick","$route","query","formSubmitted","length","event","preventDefault","resetErrorMessage","validate","then","result","hasError","login","data","errorList","$store","dispatch","$router","push","FormComponent","computed","mapGetters","methods","mapActions","Object","keys","reduce","acc","key","message","field","forEach","module","exports"],"mappings":"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","file":"js/chunk-318e9a28.5c1b75c1.js","sourcesContent":["import { Component, Vue } from 'vue-property-decorator'\nimport { VNode } from 'vue'\n\nimport logo from '@/assets/images/logo.svg'\n\n\n@Component\nexport default class Brand extends Vue {\n    render(): VNode {\n        return <div class=\"logo\">\n            <router-link to={{ name: 'home' }}>\n                <img src={logo} alt=\"Guthi\" />\n            </router-link>\n        </div>\n    }\n}","import { iErrorMessage, iLogin } from '@/interfaces/auth'\nimport FormComponent from '@/core/FormComponent'\n\nimport { validate } from 'vee-validate'\nimport { VNode } from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { mapActions, mapGetters } from 'vuex'\n\nimport Brand from '@/components/common/Brand'\n\n@Component({\n  computed: {\n    ...mapGetters({\n      errorList: 'root/getErrorMessage',\n    })\n  },\n  methods: {\n    ...mapActions({\n      login: 'root/login'\n    })\n  }\n})\nexport default class Login extends FormComponent {\n  private login!: (formData: iLogin) => Promise<boolean>\n  private isLoggingIn: boolean = false\n  private errorList?: iErrorMessage\n  private formData: iLogin = {\n    email: '',\n    password: ''\n  }\n\n  constructor() {\n    super()\n\n    this.errors = {\n      email: [],\n      password: []\n    }\n  }\n\n  mounted() {\n    this.$nextTick(() => {\n      if (this.$route.query.email)\n        this.formData.email = this.$route.query.email as string\n    })\n  }\n\n  /**\n   * \n   * @returns VNode\n   */\n  render(): VNode {\n    return (<section class=\"account__section\">\n      <div class=\"account__section__body\">\n        <Brand />\n        <h1>Login</h1>\n        <form action=\"#\" class=\"account__section__form\" onSubmit={this.formSubmitted} novalidate>\n          <div class={{ 'form__group': true, 'input--invalid': this.errors.email.length > 0 }}>\n            <label class=\"sr-only\" for=\"asf-username\">Username</label>\n            <input type=\"email\" name=\"username\" id=\"asf-username\" placeholder=\"Username\" v-model={this.formData.email} />\n            {this.errors.email.length > 0 ? (<span class=\"input__text\">{this.errors.email[0]}</span>) : null}\n          </div>\n          <div class={{ 'form__group': true, 'input--invalid': this.errors.password.length > 0 }}>\n            <label class=\"sr-only\" for=\"asf-password\">Password</label>\n            <input type=\"password\" name=\"password\" id=\"asf-password\" placeholder=\"Password\" v-model={this.formData.password} />\n            {this.errors.password.length > 0 ? (<span class=\"input__text\">{this.errors.password[0]}</span>) : null}\n          </div>\n          <div class=\"form__holder\">\n            <router-link to={{ name: \"forgot_password\" }} class=\"forgot__password\">Forgot password?</router-link>\n          </div>\n          <div class=\"btn__holder\">\n            <div class=\"btn__block\">\n              <button type=\"submit\" class=\"btn btn__primary\">\n                {this.isLoggingIn ? (<span class=\"icon-spinner loading\"></span>) : null}\n                login\n              </button>\n            </div>\n            <div class=\"btn__block\">\n              <span class=\"text\">or</span>\n            </div>\n            <div class=\"btn__block\">\n              <router-link to={{ name: 'register' }} class=\"btn btn__danger\">register</router-link>\n            </div>\n          </div>\n        </form>\n      </div>\n    </section>)\n  }\n\n  /**\n   * \n   * @param event \n   * HTML Form submit event\n   * \n   * @returns void\n   */\n  async formSubmitted(event: HTMLFormElement): Promise<void> {\n    event.preventDefault()\n    this.resetErrorMessage()\n\n    await validate(this.formData.email, 'required|email|min:4', { name: 'email' })\n      .then(result => {\n        this.errors['email'] = result.errors\n      })\n\n    await validate(this.formData.password, 'required', { name: 'password' })\n      .then(result => {\n        this.errors['password'] = result.errors\n      })\n\n    this.$nextTick(async () => {\n      if (!this.hasError) {\n        this.isLoggingIn = true\n\n        try {\n          const data = await this.login(this.formData)\n\n          if (data) {\n            this.errors = { ...this.errors, ...this.errorList }\n            this.$store.dispatch('root/fetchUser')\n            this.$router.push({ name: 'realstate' })\n          }\n\n        } finally {\n          this.isLoggingIn = false\n        }\n      }\n    })\n  }\n}\n","import { iErrorMessage } from '@/interfaces/auth'\nimport { Component, Vue } from 'vue-property-decorator'\n\n// let timer: any\n@Component\nexport default class FormComponent extends Vue {\n    protected errors!: iErrorMessage\n\n    // @Watch('errors', { deep: true })\n    // errorWatcher() {\n    //     if (timer)\n    //         return\n\n    //     timer = setTimeout(() => {\n    //         this.resetErrorMessage()\n    //     }, 7000)\n    // }\n\n    /**\n    * Checks if there are any errors\n    * \n    * @returns boolean\n    */\n    get hasError(): boolean {\n        return Object.keys(this.errors).reduce((acc: boolean, key: string): boolean => {\n            return acc || this.errors[key].length > 0\n        }, false)\n    }\n\n    get errorMessage(): string {\n        let message: string = ''\n\n        for (const field in this.errors) {\n            if (this.errors[field].length > 0) {\n                message = this.errors[field][0]\n                return message\n            }\n        }\n        return message\n    }\n\n    protected resetErrorMessage(): void {\n\n        Object.keys(this.errors).forEach((key: string) => {\n            this.errors[key] = []\n        })\n    }\n}\n","module.exports = __webpack_public_path__ + \"img/logo.3bfb7f4b.svg\";"],"sourceRoot":""}